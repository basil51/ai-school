// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Auth roles ---
enum Role {
  student
  teacher
  guardian
  admin
  super_admin
}

// --- Organization tiers ---
enum OrganizationTier {
  free
  basic
  premium
  enterprise
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      Role     @default(student)
  organizationId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  
  // Organization relationship
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // NextAuth relations
  accounts  Account[]
  sessions  Session[]
  
  // Guardian-Student relationships
  guardianRelationships GuardianRelationship[] @relation("GuardianUser")
  studentRelationships  GuardianRelationship[] @relation("StudentUser")
  
  // Email preferences
  emailPreferences EmailPreference?
  
  // Progress tracking for emails
  progressReports ProgressReport[]
  
  // Email logs
  emailLogs EmailLog[]
  
  // Audit logs
  auditLogs AuditLog[]
  
  // Scheduled reports created by user
  scheduledReports ScheduledReport[]
  
  // Attendance & Grades relationships
  studentAttendance Attendance[] @relation("StudentAttendance")
  teacherAttendance Attendance[] @relation("TeacherAttendance")
  teacherAssignments Assignment[] @relation("TeacherAssignment")
  studentGrades Grade[] @relation("StudentGrade")
  teacherGrades Grade[] @relation("TeacherGrade")
  studentPerformance StudentPerformance[]
  
  // Chat relationships
  sentMessages ChatMessage[]
  chatParticipants ChatParticipant[]

  // Curriculum relationships
  studentEnrollments StudentEnrollment[]
  studentProgress StudentProgress[]
  studentProfile StudentProfile?
  studentAdaptations LessonAdaptation[]
  assessmentAttempts AssessmentAttempt[]
  failureAnalyses FailureAnalysis[]
  learningAnalytics LearningAnalytics[]
  personalizationData PersonalizationData?
  successMetrics SuccessMetrics[]
  
  // Revolutionary Adaptive Teaching Engine relationships
  neuralPathways NeuralPathway[]
  
  // Phase 17: Advanced Assessment Engine relationships
  adaptiveAssessments AdaptiveAssessment[]
  assessmentPredictions AssessmentPrediction[]
  learningGaps LearningGap[]
  learningDimensions LearningDimensions?
  learningInterventions LearningIntervention[]
  crossDomainConnections CrossDomainConnection[]
  emotionalStates EmotionalState[]
  predictiveAnalytics PredictiveAnalytics[]
  
  // Phase 18: Advanced Analytics & Reporting relationships
  learningPatterns LearningPattern[]
  learningCurves LearningCurve[]
  knowledgeRetention KnowledgeRetention[]
  engagementOptimizations EngagementOptimization[]
  guardianInsights GuardianInsight[] @relation("GuardianInsight")
  studentInsights GuardianInsight[] @relation("StudentInsight")
  performanceKPIs PerformanceKPI[]
  analyticsDashboards AnalyticsDashboard[]
  
  // Phase 21: A/B Testing & Evaluation relationships
  abTestExperiments ABTestExperiment[]
  abTestParticipants ABTestParticipant[]
  userFeedback UserFeedback[]
  feedbackAssigned UserFeedback[] @relation("FeedbackAssignee")
  accessibilityAudits AccessibilityAudit[]
  accessibilityIssues AccessibilityIssue[]
  
  // Phase 21: Inclusivity Audit relationships
  inclusivityAudits InclusivityAudit[]
  inclusivityFindings InclusivityFinding[]
  accessibilityProfile UserAccessibilityProfile?
  
  // Phase 21: Accessibility Compliance relationships
  accessibilityComplianceAudits AccessibilityCompliance[]
  accessibilityFindingsAssigned AccessibilityFinding[]
  accessibilityRecommendationsAssigned AccessibilityRecommendation[]
  accessibilityTests AccessibilityTest[]
  accessibilityTrainingCompletions AccessibilityTrainingCompletion[]
  
  // Phase 21: Scalability Testing relationships
  scalabilityTests ScalabilityTest[]
  performanceBenchmarks PerformanceBenchmark[]
  optimizationRecommendationsCreated OptimizationRecommendation[] @relation("OptimizationCreator")
  optimizationRecommendationsAssigned OptimizationRecommendation[] @relation("OptimizationAssignee")
  
  // Phase 21: LMS/School System Integration relationships
  lmsEnrollments LMSEnrollment[]
  lmsGrades LMSGrade[]
  ssoUsers SSOUser[]
  sisStudents SISStudent[]
  sisTeachers SISTeacher[]
  
  // Phase 21: Continuous Monitoring relationships
  monitoringDashboards MonitoringDashboard[]
  performanceMetrics PerformanceMetric[]
  usageAnalytics UsageAnalytic[]
  alertsAcknowledged Alert[] @relation("AlertAcknowledgedBy")
  alertsResolved Alert[] @relation("AlertResolvedBy")
  monitoringRules MonitoringRule[]
  notificationChannels NotificationChannel[]
  monitoringReports MonitoringReport[]
  
  // Phase 19: Advanced Features relationships
  learningSessions LearningSession[]
  teachingEffectiveness TeachingEffectiveness[]
  securityAudits SecurityAudit[]
  
  // Smart Teaching relationships
  smartTeachingSessions SmartTeachingSession[]
  
  // Phase 3: Production Readiness - Progress Tracking and Analytics
  realTimeProgress RealTimeProgress[]
  phase3LearningAnalytics Phase3LearningAnalytics[]
  phase3PerformanceMetricsStudent Phase3PerformanceMetrics[] @relation("Phase3PerformanceStudent")
  phase3PerformanceMetricsTeacher Phase3PerformanceMetrics[] @relation("Phase3PerformanceTeacher")
  learningOutcomePredictions LearningOutcomePrediction[]
  phase3ProgressReports Phase3ProgressReport[]
  generatedReports Phase3ProgressReport[] @relation("ReportGeneratedBy")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// --- Organization Management ---
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  tier        OrganizationTier @default(free)
  domain      String?  @unique // Optional custom domain
  logoUrl     String?
  primaryColor String? @default("#2563eb")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  users       User[]
  documents   RagDocument[]
  settings    OrganizationSettings?
  auditLogs   AuditLog[]
  scheduledReports ScheduledReport[]
  
  // Usage tracking
  monthlyQuestions  Int @default(0)
  monthlyDocuments  Int @default(0)
  storageUsed      BigInt @default(0) // in bytes
  
  // Attendance & Grades relationships
  attendance Attendance[]
  gradeCategories GradeCategory[]
  assignments Assignment[]
  grades Grade[]
  studentPerformance StudentPerformance[]
  
  // Chat relationships
  chatRooms ChatRoom[]

  // Curriculum relationships
  subjects Subject[]
  
  // Phase 19: Advanced Features
  learningSessions LearningSession[]
  teachingEffectiveness TeachingEffectiveness[]
  securityAudits SecurityAudit[]
  
  // Phase 21: Inclusivity Audit
  inclusivityAudits InclusivityAudit[]
  userAccessibilityProfiles UserAccessibilityProfile[]
  
  // Phase 21: Accessibility Compliance
  accessibilityCompliance AccessibilityCompliance[]
  accessibilityTests AccessibilityTest[]
  accessibilityTraining AccessibilityTraining[]
  
  // Phase 21: Scalability Testing
  scalabilityTests ScalabilityTest[]
  performanceBenchmarks PerformanceBenchmark[]
  systemResources SystemResource[]
  cachePerformance CachePerformance[]
  databasePerformance DatabasePerformance[]
  optimizationRecommendations OptimizationRecommendation[]
  
  // Phase 21: LMS/School System Integration
  lmsIntegrations LMSIntegration[]
  ssoIntegrations SSOIntegration[]
  sisIntegrations SISIntegration[]
  
  // Phase 21: Continuous Monitoring
  monitoringDashboards MonitoringDashboard[]
  systemMetrics SystemMetric[]
  performanceMetrics PerformanceMetric[]
  usageAnalytics UsageAnalytic[]
  healthChecks HealthCheck[]
  alerts Alert[]
  monitoringRules MonitoringRule[]
  notificationChannels NotificationChannel[]
  monitoringReports MonitoringReport[]
  
  // Phase 3: Production Readiness - Progress Tracking and Analytics
  phase3PerformanceMetrics Phase3PerformanceMetrics[]
}

model OrganizationSettings {
  id             String @id @default(cuid())
  organizationId String @unique
  
  // Feature flags
  ragEnabled           Boolean @default(true)
  guardianEmailsEnabled Boolean @default(true)
  evaluationsEnabled   Boolean @default(false)
  
  // Limits based on tier
  maxUsers            Int @default(50)
  maxDocuments        Int @default(10)
  maxQuestionsPerMonth Int @default(1000)
  maxStorageBytes     BigInt @default(1073741824) // 1GB default
  
  // Customization
  welcomeMessage      String?
  customCss          String?
  emailFromName      String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

// --- RAG Models ---
model RagDocument {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  length    Int
  organizationId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  chunks    RagChunk[]
}

model RagChunk {
  id        String   @id @default(cuid())
  docId     String
  content   String   @db.Text
  embedding Unsupported("vector(1536)")
  document  RagDocument @relation(fields: [docId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

// --- Guardian-Student Relationships ---
model GuardianRelationship {
  id          String   @id @default(cuid())
  guardianId  String
  studentId   String
  status      GuardianRelationshipStatus @default(pending)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  guardian    User     @relation("GuardianUser", fields: [guardianId], references: [id], onDelete: Cascade)
  student     User     @relation("StudentUser", fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([guardianId, studentId])
}

enum GuardianRelationshipStatus {
  pending
  approved
  rejected
  revoked
}

// --- Email Preferences ---
model EmailPreference {
  id                    String   @id @default(cuid())
  userId                String   @unique
  weeklyProgressEnabled Boolean  @default(true)
  emailFrequency        EmailFrequency @default(weekly)
  lastEmailSent         DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum EmailFrequency {
  daily
  weekly
  monthly
  never
}

// --- Progress Reports ---
model ProgressReport {
  id          String   @id @default(cuid())
  userId      String
  reportDate  DateTime @default(now())
  sessionsCount Int    @default(0)
  questionsAsked Int   @default(0)
  topicsCovered String[] // Array of topics covered
  timeSpent   Int      @default(0) // in minutes
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Phase 3.1: Comprehensive Progress Reports
model Phase3ProgressReport {
  id              String   @id @default(cuid())
  studentId       String
  reportType      String   // 'daily', 'weekly', 'monthly', 'custom'
  periodStart     DateTime
  periodEnd       DateTime
  generatedBy     String?  // User ID who generated the report
  summary         String   @db.Text
  keyMetrics      Json     // Store complex metrics as JSON
  achievements    String[] // Array of achievements
  improvements    String[] // Array of improvement areas
  recommendations String[] // Array of recommendations
  goals           String[] // Array of goals for next period
  parentNotes     String?  @db.Text
  isShared        Boolean  @default(false)
  sharedWith      String[] // Array of user IDs who can view this report
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  student         User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  generatedByUser User?    @relation("ReportGeneratedBy", fields: [generatedBy], references: [id])
  
  @@index([studentId, reportType])
  @@index([periodStart, periodEnd])
}

// --- Email Templates ---
model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  htmlContent String   @db.Text
  textContent String   @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Email logs using this template
  emailLogs EmailLog[]
}

// --- Email Logs ---
model EmailLog {
  id          String   @id @default(cuid())
  recipientId String
  templateId  String?
  subject     String
  content     String   @db.Text
  status      EmailStatus @default(sent)
  sentAt      DateTime @default(now())
  errorMessage String?
  
  recipient   User     @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  template    EmailTemplate? @relation(fields: [templateId], references: [id])
}

enum EmailStatus {
  sent
  delivered
  failed
  bounced
}

// --- Audit Logging ---
model AuditLog {
  id             String   @id @default(cuid())
  organizationId String?
  userId         String?
  action         String   // e.g., "user_created", "document_uploaded", "email_sent"
  resource       String?  // e.g., "user", "document", "email"
  resourceId     String?  // ID of the affected resource
  details        Json?    // Additional details about the action
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())
  
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// --- Scheduled Reports ---
model ScheduledReport {
  id          String   @id @default(cuid())
  organizationId String
  name        String
  description String?
  frequency   ReportFrequency
  dayOfWeek   Int?     // 0-6 for weekly reports (Sunday = 0)
  dayOfMonth  Int?     // 1-31 for monthly reports
  time        String   // HH:MM format
  isActive    Boolean  @default(true)
  recipients  String[] // Array of email addresses
  metrics     String[] // Array of metric names to include
  format      ReportFormat
  lastSent    DateTime?
  nextScheduled DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdByUser User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

enum ReportFrequency {
  daily
  weekly
  monthly
}

enum ReportFormat {
  pdf
  csv
  html
}

// --- Attendance & Grades System ---

// Attendance tracking
model Attendance {
  id             String   @id @default(cuid())
  organizationId String
  studentId      String
  date           DateTime @db.Date
  status         AttendanceStatus @default(present)
  checkInTime    DateTime?
  checkOutTime   DateTime?
  notes          String?
  recordedBy     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  student        User         @relation("StudentAttendance", fields: [studentId], references: [id], onDelete: Cascade)
  recordedByUser User         @relation("TeacherAttendance", fields: [recordedBy], references: [id], onDelete: Cascade)
  
  @@unique([studentId, date])
  @@index([organizationId, date])
  @@index([studentId, date])
}

enum AttendanceStatus {
  present
  absent
  late
  excused
  sick
}

// Grade categories (e.g., Homework, Tests, Projects)
model GradeCategory {
  id             String   @id @default(cuid())
  organizationId String
  name           String   // e.g., "Homework", "Tests", "Projects"
  description    String?
  weight         Float    @default(1.0) // Weight in final grade calculation
  color          String?  @default("#3b82f6") // Color for UI display
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignments    Assignment[]
  
  @@unique([organizationId, name])
}

// Assignments (e.g., Math Quiz, Science Project)
model Assignment {
  id             String   @id @default(cuid())
  organizationId String
  categoryId     String
  title          String
  description    String?  @db.Text
  dueDate        DateTime?
  totalPoints    Float    @default(100.0)
  isActive       Boolean  @default(true)
  createdBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  category       GradeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdByUser  User         @relation("TeacherAssignment", fields: [createdBy], references: [id], onDelete: Cascade)
  grades         Grade[]
  
  @@index([organizationId, dueDate])
}

// Individual student grades
model Grade {
  id           String   @id @default(cuid())
  organizationId String
  studentId    String
  assignmentId String
  score        Float
  maxScore     Float
  percentage   Float    // Calculated percentage (score/maxScore * 100)
  letterGrade  String?  // e.g., "A", "B+", "C-"
  feedback     String?  @db.Text
  gradedBy     String
  gradedAt     DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  student      User         @relation("StudentGrade", fields: [studentId], references: [id], onDelete: Cascade)
  assignment   Assignment   @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  gradedByUser User         @relation("TeacherGrade", fields: [gradedBy], references: [id], onDelete: Cascade)
  
  @@unique([studentId, assignmentId])
  @@index([organizationId, studentId])
  @@index([assignmentId])
}

// Student performance summaries
model StudentPerformance {
  id             String   @id @default(cuid())
  organizationId String
  studentId      String
  period         PerformancePeriod
  startDate      DateTime @db.Date
  endDate        DateTime @db.Date
  
  // Attendance metrics
  totalDays      Int      @default(0)
  presentDays    Int      @default(0)
  absentDays     Int      @default(0)
  lateDays       Int      @default(0)
  attendanceRate Float    @default(0.0) // Percentage
  
  // Grade metrics
  totalAssignments Int    @default(0)
  completedAssignments Int @default(0)
  averageGrade    Float   @default(0.0)
  highestGrade    Float   @default(0.0)
  lowestGrade     Float   @default(0.0)
  
  // Calculated fields
  gpa            Float    @default(0.0) // Grade Point Average
  rank           Int?     // Class rank (if applicable)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  student        User         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, studentId, period, startDate])
  @@index([organizationId, period, startDate])
}

enum PerformancePeriod {
  daily
  weekly
  monthly
  semester
  yearly
}

// --- Phase 19: Advanced Features & Optimization Models ---

// Advanced Teaching Methods
model AdvancedTeachingMethod {
  id                  String   @id @default(cuid())
  name                String   @unique
  description         String
  pedagogicalApproach String
  cognitiveLoad       String   // low, medium, high
  engagementLevel     String   // low, medium, high
  retentionRate       Float
  prerequisites       String[]
  bestFor             String[]
  examples            String[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  effectiveness       TeachingEffectiveness[]
}

// Enhanced Content Generation
model EnhancedContent {
  id                String   @id @default(cuid())
  title             String
  content           String
  subject           String
  topic             String
  difficulty        String
  modality          ContentModality
  length            ContentLength
  learningObjectives String[]
  prerequisites     String[]
  keyConcepts       String[]
  examples          String[]
  estimatedTime     Int
  quality           Float    @default(0.0)
  accessibility     Boolean  @default(true)
  seoOptimized      Boolean  @default(false)
  tags              String[]
  language          String   @default("en")
  culturalContext   String   @default("universal")
  generatedAt       DateTime @default(now())
  version           String   @default("1.0")
  
  visualElements      VisualElement[]
  interactiveElements InteractiveElement[]
  audioElements       AudioElement[]
  assessmentQuestions AssessmentQuestion[]
  exercises           Exercise[]
  
  @@index([subject, topic])
  @@index([difficulty])
  @@index([modality])
}

// Content Elements
model VisualElement {
  id          String   @id @default(cuid())
  contentId   String
  type        String   // diagram, chart, image, animation, video
  description String
  content     String
  position    Int
  interactive Boolean  @default(false)
  
  enhancedContent EnhancedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model InteractiveElement {
  id          String   @id @default(cuid())
  contentId   String
  type        String   // quiz, simulation, game, puzzle, experiment
  title       String
  description String
  content     String
  position    Int
  difficulty  String
  
  enhancedContent EnhancedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model AudioElement {
  id        String   @id @default(cuid())
  contentId String
  type      String   // narration, music, sound_effect, pronunciation
  text      String
  duration  Int
  position  Int
  language  String   @default("en")
  
  enhancedContent EnhancedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model AssessmentQuestion {
  id            String   @id @default(cuid())
  contentId     String
  type          String   // multiple_choice, short_answer, essay, coding, practical
  question      String
  options       String[]
  correctAnswer String
  explanation   String
  difficulty    String
  points        Float    @default(1.0)
  
  enhancedContent EnhancedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model Exercise {
  id              String   @id @default(cuid())
  contentId       String
  type            String   // practice, application, creative, analytical
  title           String
  description     String
  instructions    String
  expectedOutcome String
  hints           String[]
  solution        String
  
  enhancedContent EnhancedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

// Learning Sessions
model LearningSession {
  id             String      @id @default(cuid())
  organizationId String
  studentId      String
  subject        String
  topic          String
  sessionData    Json
  startTime      DateTime
  endTime        DateTime?
  status         SessionStatus @default(active)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  student        User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
  @@index([studentId])
  @@index([status])
  @@index([startTime])
}

// Teaching Effectiveness Analysis
model TeachingEffectiveness {
  id                  String   @id @default(cuid())
  organizationId      String
  studentId           String
  methodId            String
  effectiveness       Float
  completionRate      Float
  assessmentScore     Float
  engagementLevel     Float
  retentionRate       Float
  recommendations     String[]
  alternativeMethods  String[]
  analyzedAt          DateTime @default(now())
  
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  student             User                    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  method              AdvancedTeachingMethod  @relation(fields: [methodId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
  @@index([studentId])
  @@index([methodId])
}

// Performance Metrics
model PerformanceMetrics {
  id                  String   @id @default(cuid())
  systemHealth        Float
  responseTime        Float
  cacheHitRate        Float
  adaptationAccuracy  Float
  studentSatisfaction Float
  learningOutcomes    Float
  systemUptime        Float
  recordedAt          DateTime @default(now())
}

// Content Cache
model ContentCache {
  id        String   @id @default(cuid())
  cacheKey  String
  content   String
  context   Json
  ttl       Int
  tags      String[]
  createdAt DateTime @default(now())
  expiresAt DateTime
  
  @@index([cacheKey])
  @@index([expiresAt])
}

// Security Audit
model SecurityAudit {
  id             String   @id @default(cuid())
  organizationId String
  type           String   // authentication, authorization, data_access, api_call, system_event
  userId         String?
  action         String
  resource       String
  ipAddress      String
  userAgent      String
  success        Boolean
  details        Json
  timestamp      DateTime @default(now())
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
  @@index([userId])
  @@index([type])
  @@index([timestamp])
  @@index([success])
}

// Scalability Metrics
model ScalabilityMetrics {
  id                  String   @id @default(cuid())
  currentUsers        Int
  peakUsers           Int
  requestsPerSecond   Float
  averageResponseTime Float
  databaseConnections Int
  cacheHitRate        Float
  memoryUsage         Float
  cpuUsage            Float
  errorRate           Float
  throughput          Float
  recordedAt          DateTime @default(now())
  
  @@index([recordedAt])
}

// Enums for Phase 19
enum ContentModality {
  text
  visual
  audio
  interactive
  multimodal
}

enum ContentLength {
  short
  medium
  long
}

enum SessionStatus {
  active
  completed
  paused
}

// --- Chat System Models ---

// Chat rooms for each organization
model ChatRoom {
  id             String   @id @default(cuid())
  organizationId String
  name           String   @default("General")
  description    String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  messages       ChatMessage[]
  participants   ChatParticipant[]
  
  @@unique([organizationId, name])
  @@index([organizationId, isActive])
}

// Chat messages
model ChatMessage {
  id         String   @id @default(cuid())
  roomId     String
  senderId   String
  content    String   @db.Text
  messageType MessageType @default(text)
  isEdited   Boolean  @default(false)
  editedAt   DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  room       ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender     User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  @@index([roomId, createdAt])
  @@index([senderId, createdAt])
}

// Chat participants (users in each room)
model ChatParticipant {
  id         String   @id @default(cuid())
  roomId     String
  userId     String
  joinedAt   DateTime @default(now())
  lastReadAt DateTime?
  isActive   Boolean  @default(true)
  
  room       ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([roomId, userId])
  @@index([userId, isActive])
}

enum MessageType {
  text
  system
  notification
}

// --- AI Teacher Curriculum Engine Models ---

enum SubjectLevel {
  elementary
  middle
  high
  college
  university
}

enum DifficultyLevel {
  beginner
  intermediate
  advanced
  expert
}

enum AssessmentType {
  quiz
  test
  assignment
  project
  homework
}

enum QuestionType {
  multiple_choice
  short_answer
  essay
  coding
  true_false
  fill_in_blank
}

enum FailureType {
  concept_gap
  prerequisite_missing
  learning_style_mismatch
  attention_deficit
  motivation_issue
}

enum PaceLevel {
  slow
  moderate
  fast
  adaptive
}

// Subject (e.g., Mathematics, Physics, History)
model Subject {
  id          String   @id @default(cuid())
  name        String   // "Mathematics", "Physics", "History"
  description String?
  level       SubjectLevel
  isActive    Boolean  @default(true)
  organizationId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  topics      Topic[]
  enrollments StudentEnrollment[]
  successMetrics SuccessMetrics[]
  
  // Phase 17: Advanced Assessment Engine relationships
  adaptiveAssessments AdaptiveAssessment[]
  assessmentPredictions AssessmentPrediction[]
  learningGaps LearningGap[]
  
  // Phase 18: Advanced Analytics & Reporting relationships
  learningCurves LearningCurve[]
  knowledgeRetention KnowledgeRetention[]
  performanceKPIs PerformanceKPI[]
  
  // Phase 3: Production Readiness - Progress Tracking and Analytics
  phase3LearningAnalytics Phase3LearningAnalytics[]
  learningOutcomePredictions LearningOutcomePrediction[]
  
  @@unique([organizationId, name])
  @@index([organizationId, isActive])
}

// Topic within a subject (e.g., Algebra, Geometry, Calculus)
model Topic {
  id          String   @id @default(cuid())
  subjectId   String
  name        String   // "Algebra", "Geometry", "Calculus"
  description String?
  order       Int      // Sequence within subject
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  
  // Phase 17: Advanced Assessment Engine relationships
  learningGaps LearningGap[]
  
  @@unique([subjectId, name])
  @@index([subjectId, order])
}

// Individual lesson within a topic
model Lesson {
  id            String   @id @default(cuid())
  topicId       String
  title         String
  content       String   @db.Text
  objectives    String[] // Learning objectives
  difficulty    DifficultyLevel
  estimatedTime Int      // Minutes
  order         Int      // Sequence within topic
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  topic         Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  prerequisites LessonPrerequisite[]
  prerequisiteFor LessonPrerequisite[] @relation("Prerequisite")
  assessments   Assessment[]
  progress      StudentProgress[]
  adaptations   LessonAdaptation[]
  
  // Smart Teaching relationships
  smartTeachingSessions SmartTeachingSession[]
  generatedContent GeneratedContent[]
  
  // Phase 3: Production Readiness - Progress Tracking and Analytics
  realTimeProgress RealTimeProgress[]
  
  @@unique([topicId, title])
  @@index([topicId, order])
}

// Prerequisites between lessons
model LessonPrerequisite {
  id            String   @id @default(cuid())
  lessonId      String
  prerequisiteId String
  createdAt     DateTime @default(now())
  
  lesson        Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  prerequisite  Lesson   @relation("Prerequisite", fields: [prerequisiteId], references: [id], onDelete: Cascade)
  
  @@unique([lessonId, prerequisiteId])
}

// Student enrollment in subjects
model StudentEnrollment {
  id          String   @id @default(cuid())
  studentId   String
  subjectId   String
  startedAt   DateTime @default(now())
  completedAt DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, subjectId])
  @@index([studentId, isActive])
}

// Student progress tracking for lessons
model StudentProgress {
  id          String   @id @default(cuid())
  studentId   String
  lessonId    String
  status      ProgressStatus @default(not_started)
  startedAt   DateTime?
  completedAt DateTime?
  timeSpent   Int      @default(0) // Minutes
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  
  @@unique([studentId, lessonId])
  @@index([studentId, status])
}

enum ProgressStatus {
  not_started
  in_progress
  completed
  failed
  retry_needed
}

// === Phase 3: Production Readiness - Progress Tracking and Analytics ===

model RealTimeProgress {
  id                String   @id @default(cuid())
  studentId         String
  sessionId         String
  lessonId          String?
  activityType      String   // "lesson", "assessment", "whiteboard", "chat", etc.
  activityId        String?  // Specific activity identifier
  startTime         DateTime @default(now())
  endTime           DateTime?
  duration          Int      @default(0) // Seconds
  engagementLevel   Float    @default(0.0) // 0.0 to 1.0
  interactionCount  Int      @default(0)
  focusTime         Int      @default(0) // Seconds of focused activity
  distractionCount  Int      @default(0)
  completionRate    Float    @default(0.0) // 0.0 to 1.0
  accuracy          Float?   // For assessments/quizzes
  difficulty        String?  // "easy", "medium", "hard"
  learningStyle     String?  // Detected learning style
  emotionalState    String?  // "engaged", "confused", "frustrated", "excited"
  metadata          Json?    // Additional tracking data
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  student           User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lesson            Lesson?  @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  
  @@index([studentId, startTime])
  @@index([sessionId])
  @@index([activityType, startTime])
}

model Phase3LearningAnalytics {
  id                    String   @id @default(cuid())
  studentId             String
  subjectId             String?
  timeframe             String   // "daily", "weekly", "monthly", "yearly"
  periodStart           DateTime
  periodEnd             DateTime
  totalLearningTime     Int      @default(0) // Minutes
  totalSessions         Int      @default(0)
  averageSessionLength  Float    @default(0.0) // Minutes
  averageEngagement     Float    @default(0.0) // 0.0 to 1.0
  lessonsCompleted      Int      @default(0)
  assessmentsCompleted  Int      @default(0)
  averageAccuracy       Float    @default(0.0) // 0.0 to 1.0
  improvementRate       Float    @default(0.0) // Percentage improvement
  learningVelocity      Float    @default(0.0) // Lessons per hour
  retentionRate         Float    @default(0.0) // 0.0 to 1.0
  difficultyProgression Float    @default(0.0) // How well student handles harder content
  preferredLearningTime String?  // "morning", "afternoon", "evening"
  preferredLearningStyle String? // "visual", "auditory", "kinesthetic", "reading"
  strengths             String[] // Array of subject/topic strengths
  weaknesses            String[] // Array of areas needing improvement
  goals                 String[] // Learning goals for the period
  achievements          String[] // Achievements unlocked
  recommendations       Json?    // AI-generated recommendations
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  student               User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject               Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  
  @@unique([studentId, subjectId, timeframe, periodStart])
  @@index([studentId, periodStart])
  @@index([timeframe, periodStart])
}

model Phase3PerformanceMetrics {
  id                    String   @id @default(cuid())
  studentId             String?
  teacherId             String?
  organizationId        String?
  metricType            String   // "system", "user", "content", "engagement"
  metricName            String   // "response_time", "accuracy", "engagement", etc.
  metricValue           Float
  metricUnit            String?  // "ms", "percentage", "count", etc.
  context               Json?    // Additional context data
  timestamp             DateTime @default(now())
  sessionId             String?
  lessonId              String?
  assessmentId          String?
  
  student               User?    @relation("Phase3PerformanceStudent", fields: [studentId], references: [id], onDelete: Cascade)
  teacher               User?    @relation("Phase3PerformanceTeacher", fields: [teacherId], references: [id], onDelete: Cascade)
  organization          Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([metricType, timestamp])
  @@index([studentId, timestamp])
  @@index([organizationId, timestamp])
}

model LearningOutcomePrediction {
  id                    String   @id @default(cuid())
  studentId             String
  subjectId             String?
  predictionType        String   // "success", "engagement", "retention", "completion"
  predictedValue        Float    // Predicted score/outcome
  confidence            Float    // Confidence level (0.0 to 1.0)
  timeframe             String   // "short_term", "medium_term", "long_term"
  predictionDate        DateTime @default(now())
  targetDate            DateTime // When the prediction is for
  factors               Json     // Factors that influenced the prediction
  recommendations       String[] // Recommendations to improve outcome
  actualOutcome         Float?   // Actual outcome when available
  accuracy              Float?   // How accurate the prediction was
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  student               User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject               Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  
  @@index([studentId, predictionType, targetDate])
  @@index([predictionType, predictionDate])
}

// Student learning profile for personalization
model StudentProfile {
  id              String      @id @default(cuid())
  studentId       String      @unique
  learningStyle   Json        // LearningStyle object
  preferredPace   PaceLevel   @default(moderate)
  strengthAreas   String[]    // Topics student excels in
  weaknessAreas   String[]    // Topics needing improvement
  motivationLevel Float       @default(0.5)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  student         User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([studentId])
}

// Lesson adaptations for individual students
model LessonAdaptation {
  id                String        @id @default(cuid())
  studentId         String
  lessonId          String
  originalContent   String        @db.Text
  adaptedContent    String        @db.Text
  adaptationReason  String
  effectiveness     Float?        // Measured after assessment
  createdAt         DateTime      @default(now())
  
  student           User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lesson            Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@index([studentId, lessonId])
}

// Assessment system
model Assessment {
  id          String   @id @default(cuid())
  lessonId    String
  type        AssessmentType
  title       String
  instructions String  @db.Text
  timeLimit   Int?     // Minutes
  passingScore Float   @default(0.7)
  maxAttempts Int      @default(3)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    AssessmentAttempt[]
  failureAnalysis FailureAnalysis[]
  
  // Smart Teaching relationships
  smartTeachingAssessments SmartTeachingAssessment[]
  
  @@index([lessonId, type])
}

// Questions within assessments
model Question {
  id            String      @id @default(cuid())
  assessmentId  String
  type          QuestionType
  content       String      @db.Text
  points        Float       @default(1.0)
  correctAnswer String?     @db.Text
  explanation   String?     @db.Text
  order         Int
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  assessment    Assessment  @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  options       QuestionOption[]
  responses     StudentResponse[]
  
  @@index([assessmentId, order])
}

// Multiple choice options
model QuestionOption {
  id          String   @id @default(cuid())
  questionId  String
  content     String   @db.Text
  isCorrect   Boolean  @default(false)
  order       Int
  createdAt   DateTime @default(now())
  
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@index([questionId, order])
}

// Student assessment attempts
model AssessmentAttempt {
  id           String    @id @default(cuid())
  studentId    String
  assessmentId String
  startedAt    DateTime  @default(now())
  completedAt  DateTime?
  score        Float?
  feedback     String?   @db.Text
  passed       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  student      User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  responses    StudentResponse[]
  
  @@index([studentId, assessmentId])
  @@index([studentId, passed])
}

// Individual student responses to questions
model StudentResponse {
  id              String   @id @default(cuid())
  attemptId       String
  questionId      String
  answer          String   @db.Text
  isCorrect       Boolean?
  pointsEarned    Float    @default(0.0)
  feedback        String?  @db.Text
  timeSpent       Int      @default(0) // Seconds
  createdAt       DateTime @default(now())
  
  attempt         AssessmentAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  
  @@unique([attemptId, questionId])
}

// --- Phase 17: Advanced Assessment Engine ---

// Adaptive Assessment Sessions
model AdaptiveAssessment {
  id              String   @id @default(cuid())
  studentId       String
  subjectId       String
  sessionType     AdaptiveSessionType
  currentLevel    Int      @default(1)
  totalQuestions  Int      @default(0)
  correctAnswers  Int      @default(0)
  currentDifficulty Float  @default(0.5) // 0.0 to 1.0
  confidence      Float    @default(0.5) // AI confidence in assessment
  isActive        Boolean  @default(true)
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  student         User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject         Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  questions       AdaptiveQuestion[]
  responses       AdaptiveResponse[]
  analytics       AdaptiveAnalytics[]
  
  @@index([studentId, isActive])
  @@index([subjectId, sessionType])
}

enum AdaptiveSessionType {
  DIAGNOSTIC      // Initial assessment to determine starting level
  FORMATIVE       // Ongoing assessment during learning
  SUMMATIVE       // Final assessment of learning outcomes
  REMEDIATION     // Assessment focused on weak areas
  ENRICHMENT      // Assessment for advanced learners
}

// Adaptive Questions with AI-generated content
model AdaptiveQuestion {
  id                String   @id @default(cuid())
  adaptiveAssessmentId String
  questionType      AdaptiveQuestionType
  content           Json     // Flexible content structure
  difficulty        Float    // 0.0 to 1.0
  estimatedTime     Int      // Seconds
  learningObjective String?
  cognitiveLevel    CognitiveLevel
  isAnswered        Boolean  @default(false)
  order             Int
  createdAt         DateTime @default(now())
  
  adaptiveAssessment AdaptiveAssessment @relation(fields: [adaptiveAssessmentId], references: [id], onDelete: Cascade)
  responses          AdaptiveResponse[]
  
  @@index([adaptiveAssessmentId, order])
}

enum AdaptiveQuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  SHORT_ANSWER
  ESSAY
  MATHEMATICAL
  CODE_EXECUTION
  SIMULATION
  AUDIO_RESPONSE
  VISUAL_ANALYSIS
  INTERACTIVE_DEMO
}

enum CognitiveLevel {
  REMEMBER
  UNDERSTAND
  APPLY
  ANALYZE
  EVALUATE
  CREATE
}

// Student responses to adaptive questions
model AdaptiveResponse {
  id                String   @id @default(cuid())
  adaptiveAssessmentId String
  questionId        String
  answer            Json     // Flexible answer structure
  isCorrect         Boolean?
  confidence        Float?   // Student's confidence in answer
  timeSpent         Int      // Seconds
  hintsUsed         Int      @default(0)
  attempts          Int      @default(1)
  aiFeedback        String?  @db.Text
  createdAt         DateTime @default(now())
  
  adaptiveAssessment AdaptiveAssessment @relation(fields: [adaptiveAssessmentId], references: [id], onDelete: Cascade)
  question           AdaptiveQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@unique([adaptiveAssessmentId, questionId])
}

// Advanced Assessment Analytics
model AdaptiveAnalytics {
  id                String   @id @default(cuid())
  adaptiveAssessmentId String
  metricType        AnalyticsMetricType
  value             Float
  metadata          Json?    // Additional context data
  timestamp         DateTime @default(now())
  
  adaptiveAssessment AdaptiveAssessment @relation(fields: [adaptiveAssessmentId], references: [id], onDelete: Cascade)
  
  @@index([adaptiveAssessmentId, metricType])
}

enum AnalyticsMetricType {
  LEARNING_VELOCITY
  RETENTION_RATE
  ENGAGEMENT_SCORE
  CONFIDENCE_LEVEL
  DIFFICULTY_ADJUSTMENT
  MASTERY_PROGRESSION
  TIME_EFFICIENCY
  ERROR_PATTERN_ANALYSIS
}

// Assessment Performance Predictions
model AssessmentPrediction {
  id                String   @id @default(cuid())
  studentId         String
  subjectId         String
  predictionType    PredictionType
  predictedScore    Float
  confidence        Float
  factors           Json     // Factors influencing prediction
  actualScore       Float?   // For validation
  accuracy          Float?   // Prediction accuracy
  createdAt         DateTime @default(now())
  validatedAt       DateTime?
  
  student           User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject           Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@index([studentId, predictionType])
  @@index([subjectId, createdAt])
}

enum PredictionType {
  ASSESSMENT_SCORE
  LEARNING_OUTCOME
  ENGAGEMENT_LEVEL
  COMPLETION_PROBABILITY
  DIFFICULTY_LEVEL
  TIME_TO_MASTERY
}

// Learning Gap Analysis
model LearningGap {
  id                String   @id @default(cuid())
  studentId         String
  subjectId         String
  topicId           String?
  gapType           GapType
  severity          GapSeverity
  description       String   @db.Text
  recommendedActions Json    // AI-generated recommendations
  isResolved        Boolean  @default(false)
  resolvedAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  student           User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject           Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  topic             Topic?   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  @@index([studentId, isResolved])
  @@index([subjectId, gapType])
}

enum GapType {
  CONCEPTUAL_UNDERSTANDING
  PROCEDURAL_KNOWLEDGE
  PROBLEM_SOLVING
  CRITICAL_THINKING
  APPLICATION_SKILLS
  RETENTION_ISSUES
  ENGAGEMENT_DROP
  TIME_MANAGEMENT
}

enum GapSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Failure analysis for adaptive teaching
model FailureAnalysis {
  id              String    @id @default(cuid())
  studentId       String
  assessmentId    String
  failureType     FailureType
  diagnosis       String    @db.Text
  remediation     String    @db.Text
  resolved        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  student         User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assessment      Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  @@index([studentId, resolved])
}

// Learning analytics for personalization
model LearningAnalytics {
  id                String    @id @default(cuid())
  studentId         String
  dateRange         DateTime  @db.Date
  conceptsMastered  Int       @default(0)
  timeSpent         Int       // Minutes
  assessmentScores  Float[]
  strugglingTopics  String[]
  improvingTopics   String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, dateRange])
  @@index([studentId, dateRange])
}

// Personalization data for adaptive teaching
model PersonalizationData {
  id                    String    @id @default(cuid())
  studentId             String    @unique
  effectiveStrategies   Json      // TeachingStrategy[]
  ineffectiveStrategies Json      // TeachingStrategy[]
  optimalDifficulty     Json      // Per-topic difficulty preferences
  contentPreferences    Json      // Preferred content types
  studyPatterns         Json      // Optimal times, duration, etc.
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  student               User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

// Success metrics tracking
model SuccessMetrics {
  id              String    @id @default(cuid())
  studentId       String
  subjectId       String
  period          PerformancePeriod
  startDate       DateTime  @db.Date
  endDate         DateTime  @db.Date
  
  // Completion metrics
  totalLessons    Int       @default(0)
  completedLessons Int      @default(0)
  completionRate  Float     @default(0.0) // % of lessons completed
  
  // Mastery metrics
  totalAssessments Int      @default(0)
  passedAssessments Int     @default(0)
  masteryRate     Float     @default(0.0) // % of assessments passed
  
  // Engagement metrics
  timeSpent       Int       @default(0) // Minutes
  engagementScore Float     @default(0.0) // Participation and interaction metrics
  
  // Retention metrics
  retentionRate   Float     @default(0.0) // % of concepts retained over time
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  student         User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject         Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  
  @@unique([studentId, subjectId, period, startDate])
  @@index([studentId, period, startDate])
}

// --- Revolutionary Adaptive Teaching Engine Models ---

// Neural pathway types for cognitive processing patterns
enum PathwayType {
  sequential
  parallel
  hierarchical
  network
  hybrid
}

// Learning intervention types
enum InterventionType {
  predictive
  remedial
  accelerative
  creative
  emotional
}

// Neural pathways representing how each student's brain processes information
model NeuralPathway {
  id                String      @id @default(cuid())
  studentId         String
  pathwayType       PathwayType
  strength          Float       @default(0.5) // 0-1, how well this pathway works
  activationPattern Json        // Neural activation sequence
  learningVelocity  Float       @default(0.5) // Speed of learning through this pathway
  retentionRate     Float       @default(0.5) // How well they retain information
  emotionalResonance Float      @default(0.5) // Emotional engagement level
  crossDomainTransfer Float     @default(0.5) // Ability to transfer across domains
  lastUpdated       DateTime    @default(now()) @updatedAt
  
  student           User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  interventions     LearningIntervention[]
  
  @@unique([studentId, pathwayType])
  @@index([studentId, strength])
}

// Learning dimensions analysis
model LearningDimensions {
  id                String      @id @default(cuid())
  studentId         String      @unique
  cognitive         Json        // { processingSpeed, workingMemory, attentionSpan, patternRecognition }
  emotional         Json        // { motivation, confidence, frustration, curiosity }
  social            Json        // { collaboration, competition, mentorship, independence }
  creative          Json        // { imagination, innovation, artistic, analytical }
  lastAnalyzed      DateTime    @default(now()) @updatedAt
  
  student           User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([studentId])
}

// Revolutionary learning interventions
model LearningIntervention {
  id                      String          @id @default(cuid())
  studentId               String
  pathwayId               String?
  interventionType        InterventionType
  trigger                 String          // What caused this intervention
  approach                String          // The teaching approach to use
  expectedOutcome         String
  confidence              Float           @default(0.5) // AI confidence (0-1)
  personalizedContent     String          @db.Text // AI-generated personalized content
  crossDomainConnections  String[]        // Connections to other subjects
  emotionalSupport        String          @db.Text // Emotional guidance
  successMetrics          String[]        // How to measure success
  isActive                Boolean         @default(true)
  appliedAt               DateTime?
  completedAt             DateTime?
  effectiveness           Float?          // Measured effectiveness after completion
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @default(now()) @updatedAt
  
  student                 User            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  pathway                 NeuralPathway?  @relation(fields: [pathwayId], references: [id])
  feedback                InterventionFeedback[]
  
  @@index([studentId, interventionType])
  @@index([studentId, isActive])
}

// Feedback on intervention effectiveness
model InterventionFeedback {
  id                String    @id @default(cuid())
  interventionId    String
  feedbackType      String    // 'success', 'failure', 'partial', 'emotional'
  rating            Float     // 0-1 effectiveness rating
  comments          String?   @db.Text
  metrics           Json      // Specific metrics data
  createdAt         DateTime  @default(now())
  
  intervention      LearningIntervention @relation(fields: [interventionId], references: [id], onDelete: Cascade)
  
  @@index([interventionId, feedbackType])
}

// Cross-domain learning connections
model CrossDomainConnection {
  id                String    @id @default(cuid())
  studentId         String
  sourceDomain      String    // Original subject/topic
  targetDomain      String    // Connected subject/topic
  connectionType    String    // 'analogy', 'metaphor', 'application', 'creative'
  strength          Float     @default(0.5) // How strong this connection is
  usageCount        Int       @default(0) // How often this connection is used
  effectiveness     Float     @default(0.5) // How effective this connection is
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, sourceDomain, targetDomain, connectionType])
  @@index([studentId, strength])
}

// Emotional state tracking
model EmotionalState {
  id                String    @id @default(cuid())
  studentId         String
  sessionId         String?   // Link to specific learning session
  confidence        Float     @default(0.5) // 0-1 confidence level
  stress            Float     @default(0.3) // 0-1 stress level
  engagement        Float     @default(0.7) // 0-1 engagement level
  motivation        Float     @default(0.6) // 0-1 motivation level
  curiosity         Float     @default(0.5) // 0-1 curiosity level
  frustration       Float     @default(0.2) // 0-1 frustration level
  joy               Float     @default(0.4) // 0-1 joy level
  context           String?   // What was happening when this state was recorded
  detectedAt        DateTime  @default(now())
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([studentId, detectedAt])
  @@index([studentId, stress])
}

// Predictive learning analytics
model PredictiveAnalytics {
  id                String    @id @default(cuid())
  studentId         String
  predictionType    String    // 'success', 'struggle', 'engagement', 'retention'
  confidence        Float     @default(0.5) // AI confidence in prediction
  predictedValue    Float     // Predicted metric value
  actualValue       Float?    // Actual value when measured
  accuracy          Float?    // How accurate the prediction was
  factors           Json      // Factors that influenced the prediction
  interventionSuggested Boolean @default(false) // Whether intervention was suggested
  predictedAt       DateTime  @default(now())
  measuredAt        DateTime?
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([studentId, predictionType])
  @@index([studentId, predictedAt])
}

// --- Phase 18: Advanced Analytics & Reporting Models ---

// Learning pattern analysis for deep insights
model LearningPattern {
  id                    String    @id @default(cuid())
  studentId             String
  patternType           LearningPatternType
  conceptualStrengths   String[]  // Areas of conceptual understanding
  proceduralStrengths   String[]  // Areas of procedural knowledge
  commonMistakes        String[]  // Frequently made errors
  effectiveStrategies   Json      // TeachingStrategy[] that work well
  optimalStudyTimes     String[]  // Best times for learning
  preferredContentTypes Json      // ContentType[] preferences
  learningVelocity      Float     @default(0.5) // Speed of learning
  retentionRate         Float     @default(0.5) // Knowledge retention
  engagementPattern     Json      // Engagement patterns over time
  difficultyPreference  Float     @default(0.5) // Preferred difficulty level
  socialLearningStyle   Json      // Collaborative vs individual preferences
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt
  
  student               User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, patternType])
  @@index([studentId, patternType])
}

enum LearningPatternType {
  COGNITIVE_PROCESSING
  LEARNING_STYLE
  ENGAGEMENT_PATTERN
  RETENTION_PATTERN
  DIFFICULTY_PREFERENCE
  SOCIAL_LEARNING
  TEMPORAL_PATTERN
  CONTENT_PREFERENCE
}

// Comprehensive learning curve analysis
model LearningCurve {
  id                String    @id @default(cuid())
  studentId         String
  subjectId         String
  topicId           String?
  curveType         CurveType
  dataPoints        Json      // Array of {time, mastery, difficulty} points
  slope             Float     // Learning velocity
  plateauPoints     Json      // Points where learning plateaus
  accelerationZones Json      // Areas of rapid learning
  difficultySpikes  Json      // Points of increased difficulty
  masteryThreshold  Float     @default(0.8) // Threshold for mastery
  predictedCompletion DateTime? // Predicted completion time
  confidence        Float     @default(0.5) // AI confidence in curve
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject           Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@index([studentId, subjectId])
  @@index([studentId, curveType])
}

enum CurveType {
  MASTERY_CURVE
  ENGAGEMENT_CURVE
  DIFFICULTY_CURVE
  RETENTION_CURVE
  VELOCITY_CURVE
  COMPREHENSION_CURVE
}

// Knowledge retention tracking with spaced repetition
model KnowledgeRetention {
  id                String    @id @default(cuid())
  studentId         String
  conceptId         String    // Unique identifier for the concept
  conceptName       String
  subjectId         String
  initialMastery    Float     // Initial mastery level (0-1)
  retentionLevel    Float     // Current retention level (0-1)
  lastReviewed      DateTime
  nextReview        DateTime  // Spaced repetition schedule
  reviewCount       Int       @default(0)
  forgettingCurve   Json      // Retention decay over time
  reinforcementNeeded Boolean @default(false)
  masteryThreshold  Float     @default(0.8)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject           Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, conceptId])
  @@index([studentId, nextReview])
  @@index([studentId, reinforcementNeeded])
}

// Engagement optimization tracking
model EngagementOptimization {
  id                String    @id @default(cuid())
  studentId         String
  sessionId         String?   // Link to specific learning session
  engagementLevel   Float     // Current engagement (0-1)
  engagementFactors Json      // Factors affecting engagement
  optimizationActions Json    // Actions taken to improve engagement
  effectiveness     Float?    // How effective the optimization was
  contentAdjustments Json     // Content modifications made
  pacingAdjustments Json      // Pacing changes made
  interactionChanges Json     // Interaction pattern changes
  beforeEngagement  Float     // Engagement level before optimization
  afterEngagement   Float?    // Engagement level after optimization
  timestamp         DateTime  @default(now())
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([studentId, timestamp])
  @@index([studentId, engagementLevel])
}

// Parent/Guardian insights and recommendations
model GuardianInsight {
  id                String    @id @default(cuid())
  guardianId        String
  studentId         String
  insightType       InsightType
  title             String
  description       String    @db.Text
  recommendations   Json      // Array of actionable recommendations
  priority          InsightPriority
  isRead            Boolean   @default(false)
  actionTaken       Boolean   @default(false)
  actionNotes       String?   @db.Text
  effectiveness     Float?    // How effective the insight was
  generatedAt       DateTime  @default(now())
  expiresAt         DateTime? // When this insight becomes outdated
  
  guardian          User      @relation("GuardianInsight", fields: [guardianId], references: [id], onDelete: Cascade)
  student           User      @relation("StudentInsight", fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([guardianId, isRead])
  @@index([studentId, insightType])
  @@index([generatedAt, priority])
}

enum InsightType {
  ACADEMIC_PROGRESS
  LEARNING_STYLE
  ENGAGEMENT_LEVEL
  STRUGGLING_AREAS
  STRENGTH_AREAS
  STUDY_HABITS
  MOTIVATION_LEVEL
  SOCIAL_LEARNING
  ATTENTION_SPAN
  DIFFICULTY_PREFERENCE
  RECOMMENDED_INTERVENTIONS
  CELEBRATION_MOMENTS
}

enum InsightPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Comprehensive performance metrics and KPIs
model PerformanceKPI {
  id                String    @id @default(cuid())
  studentId         String
  subjectId         String?
  kpiType           KPIType
  period            PerformancePeriod
  startDate         DateTime  @db.Date
  endDate           DateTime  @db.Date
  
  // Academic KPIs
  masteryRate       Float     @default(0.0) // % of concepts mastered
  completionRate    Float     @default(0.0) // % of lessons completed
  assessmentScore   Float     @default(0.0) // Average assessment score
  learningVelocity  Float     @default(0.0) // Rate of learning progress
  
  // Engagement KPIs
  engagementScore   Float     @default(0.0) // Overall engagement level
  timeOnTask        Int       @default(0) // Minutes spent on learning
  interactionRate   Float     @default(0.0) // Rate of interactions
  persistenceScore  Float     @default(0.0) // Persistence in difficult tasks
  
  // Retention KPIs
  retentionRate     Float     @default(0.0) // Knowledge retention over time
  transferRate      Float     @default(0.0) // Ability to transfer knowledge
  applicationRate   Float     @default(0.0) // Ability to apply knowledge
  
  // Behavioral KPIs
  attendanceRate    Float     @default(0.0) // Attendance consistency
  punctualityRate   Float     @default(0.0) // Punctuality in submissions
  collaborationScore Float    @default(0.0) // Collaborative learning score
  
  // Growth KPIs
  improvementRate   Float     @default(0.0) // Rate of improvement over time
  goalAchievement   Float     @default(0.0) // % of goals achieved
  selfEfficacy      Float     @default(0.0) // Self-confidence in learning
  
  // Comparative metrics
  peerComparison    Json      // Comparison with peer group
  historicalTrend   Json      // Historical performance trend
  benchmarkScore    Float?    // Score against benchmarks
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject           Subject?  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, subjectId, kpiType, period, startDate])
  @@index([studentId, kpiType, period])
  @@index([studentId, startDate, endDate])
}

enum KPIType {
  ACADEMIC_PERFORMANCE
  ENGAGEMENT_METRICS
  RETENTION_ANALYSIS
  BEHAVIORAL_INSIGHTS
  GROWTH_TRACKING
  COMPARATIVE_ANALYSIS
  GOAL_ACHIEVEMENT
  SKILL_DEVELOPMENT
}

// Learning analytics dashboard configuration
model AnalyticsDashboard {
  id                String    @id @default(cuid())
  userId            String
  dashboardType     DashboardType
  name              String
  description       String?
  configuration     Json      // Dashboard layout and widget configuration
  isDefault         Boolean   @default(false)
  isPublic          Boolean   @default(false)
  refreshInterval   Int       @default(300) // Seconds
  lastRefreshed     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, dashboardType])
  @@index([userId, isDefault])
}

enum DashboardType {
  STUDENT_PROGRESS
  TEACHER_ANALYTICS
  ADMIN_OVERVIEW
  GUARDIAN_INSIGHTS
  CUSTOM_ANALYTICS
  PERFORMANCE_TRACKING
  ENGAGEMENT_MONITORING
  RETENTION_ANALYSIS
}

// --- Phase 21: A/B Testing Framework Models ---

// A/B Test Experiments
model ABTestExperiment {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String   @db.Text
  hypothesis        String   @db.Text
  testType          ABTestType
  status            ABTestStatus @default(draft)
  startDate         DateTime?
  endDate           DateTime?
  targetAudience    Json     // Audience criteria (role, organization, etc.)
  successMetrics    String[] // Metrics to measure success
  minimumSampleSize Int      @default(100)
  confidenceLevel   Float    @default(0.95)
  isActive          Boolean  @default(false)
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  createdByUser     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  variants          ABTestVariant[]
  participants      ABTestParticipant[]
  results           ABTestResult[]
  
  @@index([status, isActive])
  @@index([testType])
  @@index([startDate, endDate])
}

enum ABTestType {
  TEACHING_METHOD
  CONTENT_PRESENTATION
  ASSESSMENT_FORMAT
  UI_UX_DESIGN
  PERSONALIZATION_ALGORITHM
  ENGAGEMENT_STRATEGY
  DIFFICULTY_ADJUSTMENT
  FEEDBACK_MECHANISM
}

enum ABTestStatus {
  draft
  active
  paused
  completed
  cancelled
}

// A/B Test Variants
model ABTestVariant {
  id                String   @id @default(cuid())
  experimentId      String
  name              String
  description       String   @db.Text
  variantType       VariantType @default(control)
  configuration     Json     // Variant-specific configuration
  trafficAllocation Float    @default(0.5) // Percentage of traffic (0-1)
  isControl         Boolean  @default(false)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  experiment        ABTestExperiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  participants      ABTestParticipant[]
  results           ABTestResult[]
  
  @@index([experimentId, isControl])
  @@index([variantType])
}

enum VariantType {
  control
  treatment
  alternative
}

// A/B Test Participants
model ABTestParticipant {
  id                String   @id @default(cuid())
  experimentId      String
  variantId         String
  userId            String
  enrolledAt        DateTime @default(now())
  completedAt       DateTime?
  isActive          Boolean  @default(true)
  dropoutReason     String?
  metadata          Json?    // Additional participant data
  
  experiment        ABTestExperiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  variant           ABTestVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interactions      ABTestInteraction[]
  
  @@unique([experimentId, userId])
  @@index([experimentId, variantId])
  @@index([userId, isActive])
}

// A/B Test Interactions
model ABTestInteraction {
  id                String   @id @default(cuid())
  participantId     String
  interactionType   InteractionType
  action            String
  context           Json?    // Context data (page, lesson, etc.)
  timestamp         DateTime @default(now())
  duration          Int?     // Duration in seconds
  outcome           String?  // Success/failure outcome
  metadata          Json?    // Additional interaction data
  
  participant       ABTestParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  
  @@index([participantId, interactionType])
  @@index([timestamp])
}

enum InteractionType {
  lesson_start
  lesson_complete
  assessment_start
  assessment_complete
  content_interaction
  navigation_action
  feedback_provided
  help_requested
  session_end
}

// A/B Test Results
model ABTestResult {
  id                String   @id @default(cuid())
  experimentId      String
  variantId         String
  metricName        String
  metricValue       Float
  sampleSize        Int
  confidenceInterval Json    // {lower, upper, confidence}
  statisticalSignificance Float?
  pValue            Float?
  effectSize        Float?
  calculatedAt      DateTime @default(now())
  
  experiment        ABTestExperiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  variant           ABTestVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  @@index([experimentId, metricName])
  @@index([variantId, metricName])
}

// User Feedback System
model UserFeedback {
  id                String   @id @default(cuid())
  userId            String
  feedbackType      FeedbackType
  category          String
  rating            Int?     // 1-5 scale
  title             String
  description       String   @db.Text
  context           Json?    // Context data (page, feature, etc.)
  isAnonymous       Boolean  @default(false)
  isPublic          Boolean  @default(false)
  status            FeedbackStatus @default(pending)
  priority          FeedbackPriority @default(medium)
  assignedTo        String?
  response          String?  @db.Text
  respondedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedToUser    User?    @relation("FeedbackAssignee", fields: [assignedTo], references: [id])
  tags              FeedbackTag[]
  
  @@index([userId, feedbackType])
  @@index([status, priority])
  @@index([category])
}

enum FeedbackType {
  bug_report
  feature_request
  improvement_suggestion
  general_feedback
  usability_issue
  accessibility_concern
  performance_issue
  content_feedback
}

enum FeedbackStatus {
  pending
  in_review
  in_progress
  resolved
  closed
  duplicate
}

enum FeedbackPriority {
  low
  medium
  high
  critical
}

// Feedback Tags
model FeedbackTag {
  id                String   @id @default(cuid())
  feedbackId        String
  tag               String
  createdAt         DateTime @default(now())
  
  feedback          UserFeedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  
  @@unique([feedbackId, tag])
  @@index([tag])
}

// System Performance Monitoring
model SystemPerformance {
  id                String   @id @default(cuid())
  metricName        String
  metricValue       Float
  unit              String
  timestamp         DateTime @default(now())
  context           Json?    // Additional context data
  severity          PerformanceSeverity @default(info)
  
  @@index([metricName, timestamp])
  @@index([severity, timestamp])
}

enum PerformanceSeverity {
  info
  warning
  error
  critical
}

// Accessibility Audit Results
model AccessibilityAudit {
  id                String   @id @default(cuid())
  pageUrl           String
  auditType         AccessibilityAuditType
  wcagLevel         WCAGLevel
  totalIssues       Int      @default(0)
  criticalIssues    Int      @default(0)
  seriousIssues     Int      @default(0)
  moderateIssues    Int      @default(0)
  minorIssues       Int      @default(0)
  score             Float    @default(0.0) // 0-100 accessibility score
  recommendations   Json     // Array of recommendations
  auditData         Json     // Detailed audit results
  auditedAt         DateTime @default(now())
  auditedBy         String?
  
  auditedByUser     User?    @relation(fields: [auditedBy], references: [id])
  issues            AccessibilityIssue[]
  
  @@index([pageUrl, auditType])
  @@index([wcagLevel, score])
}

enum AccessibilityAuditType {
  automated
  manual
  user_testing
  expert_review
}

enum WCAGLevel {
  A
  AA
  AAA
}

// Accessibility Issues
model AccessibilityIssue {
  id                String   @id @default(cuid())
  auditId           String
  issueType         String
  severity          AccessibilitySeverity
  description       String   @db.Text
  wcagCriteria      String
  elementSelector   String?
  recommendation    String   @db.Text
  isFixed           Boolean  @default(false)
  fixedAt           DateTime?
  fixedBy           String?
  
  audit             AccessibilityAudit @relation(fields: [auditId], references: [id], onDelete: Cascade)
  fixedByUser       User?    @relation(fields: [fixedBy], references: [id])
  
  @@index([auditId, severity])
  @@index([isFixed])
}

enum AccessibilitySeverity {
  minor
  moderate
  serious
  critical
}

// --- Phase 21: Inclusivity Audit Models ---
model InclusivityAudit {
  id                String      @id @default(cuid())
  organizationId    String
  auditType         InclusivityAuditType
  targetAudience    String[]    // e.g., ["ADHD", "Dyslexia", "Autism", "ESL"]
  auditDate         DateTime    @default(now())
  auditorId         String
  status            InclusivityAuditStatus @default(pending)
  overallScore      Float?      // 0-100
  recommendations   String      @db.Text
  actionPlan        String      @db.Text
  followUpDate      DateTime?
  completedAt       DateTime?
  
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  auditor           User         @relation(fields: [auditorId], references: [id])
  findings          InclusivityFinding[]
  
  @@index([organizationId, auditType])
  @@index([auditDate])
  @@index([status])
}

enum InclusivityAuditType {
  adhd_accommodations
  learning_disabilities
  cultural_sensitivity
  language_barriers
  cognitive_accessibility
  comprehensive
}

enum InclusivityAuditStatus {
  pending
  in_progress
  completed
  needs_followup
  archived
}

model InclusivityFinding {
  id                String      @id @default(cuid())
  auditId           String
  category          InclusivityCategory
  severity          InclusivitySeverity
  title             String
  description       String      @db.Text
  currentState      String      @db.Text
  recommendedAction String      @db.Text
  priority          InclusivityPriority
  estimatedEffort   String?     // e.g., "2-4 hours", "1 week"
  isImplemented     Boolean     @default(false)
  implementedAt     DateTime?
  implementedBy     String?
  
  audit             InclusivityAudit @relation(fields: [auditId], references: [id], onDelete: Cascade)
  implementedByUser User?            @relation(fields: [implementedBy], references: [id])
  
  @@index([auditId, category])
  @@index([severity])
  @@index([isImplemented])
}

enum InclusivityCategory {
  pacing_timing
  visual_design
  content_complexity
  interaction_patterns
  feedback_mechanisms
  navigation_structure
  language_clarity
  cultural_representation
  assistive_technology
  cognitive_load
}

enum InclusivitySeverity {
  low
  medium
  high
  critical
}

enum InclusivityPriority {
  low
  medium
  high
  urgent
}

// User Accessibility Preferences
model UserAccessibilityProfile {
  id                    String      @id @default(cuid())
  userId                String      @unique
  organizationId        String
  
  // Learning Preferences
  hasADHD               Boolean     @default(false)
  hasDyslexia           Boolean     @default(false)
  hasAutism             Boolean     @default(false)
  hasHearingImpairment  Boolean     @default(false)
  hasVisualImpairment   Boolean     @default(false)
  hasMobilityImpairment Boolean     @default(false)
  isESL                 Boolean     @default(false)
  
  // Pacing Preferences
  preferredPacing       PacingType  @default(standard)
  breakFrequency        Int         @default(15) // minutes
  maxSessionLength      Int         @default(45) // minutes
  
  // Visual Preferences
  preferredFontSize     FontSize    @default(medium)
  preferredColorScheme  ColorScheme @default(standard)
  highContrast          Boolean     @default(false)
  reducedMotion         Boolean     @default(false)
  
  // Content Preferences
  simplifiedLanguage    Boolean     @default(false)
  extraExplanations     Boolean     @default(false)
  visualAids            Boolean     @default(true)
  audioSupport          Boolean     @default(true)
  
  // Cultural Preferences
  primaryLanguage       String      @default("en")
  culturalContext       String?     // e.g., "Middle Eastern", "Asian", "Western"
  religiousConsiderations String?   // e.g., "Islamic", "Christian", "Secular"
  
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  
  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
  @@index([hasADHD, hasDyslexia, hasAutism])
}

enum PacingType {
  very_slow
  slow
  standard
  fast
  very_fast
}

enum FontSize {
  small
  medium
  large
  extra_large
}

enum ColorScheme {
  standard
  high_contrast
  dark_mode
  light_mode
  colorblind_friendly
}

// --- Phase 21: Accessibility Compliance Models ---
model AccessibilityCompliance {
  id                String    @id @default(cuid())
  organizationId    String
  auditDate         DateTime  @default(now())
  complianceLevel   ComplianceLevel
  wcagVersion       String    @default("2.1")
  wcagLevel         WCAGLevel
  overallScore      Float
  status            ComplianceStatus
  auditorId         String
  auditScope        String
  findings          AccessibilityFinding[]
  recommendations   AccessibilityRecommendation[]
  remediationPlan   String?
  nextAuditDate     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  auditor           User         @relation(fields: [auditorId], references: [id], onDelete: Cascade)

  @@map("accessibility_compliance")
}

model AccessibilityFinding {
  id                    String    @id @default(cuid())
  complianceId          String
  findingType           FindingType
  severity              FindingSeverity
  wcagCriteria          String
  description           String
  location              String
  impact                String
  remediation           String?
  status                FindingStatus
  assignedTo            String?
  dueDate               DateTime?
  verifiedDate          DateTime?
  notes                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  compliance            AccessibilityCompliance @relation(fields: [complianceId], references: [id], onDelete: Cascade)
  assignedUser          User?                   @relation(fields: [assignedTo], references: [id])

  @@map("accessibility_findings")
}

model AccessibilityRecommendation {
  id                    String    @id @default(cuid())
  complianceId          String
  recommendationType    RecommendationType
  priority              RecommendationPriority
  title                 String
  description           String
  implementation        String
  estimatedEffort       String?
  benefits              String
  status                RecommendationStatus
  assignedTo            String?
  dueDate               DateTime?
  completedDate         DateTime?
  notes                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  compliance            AccessibilityCompliance @relation(fields: [complianceId], references: [id], onDelete: Cascade)
  assignedUser          User?                   @relation(fields: [assignedTo], references: [id])

  @@map("accessibility_recommendations")
}

model AccessibilityTest {
  id                    String    @id @default(cuid())
  organizationId        String
  testType              TestType
  testName              String
  description           String
  testUrl               String
  testResults           Json
  passed                Boolean
  score                 Float
  issues                Json?
  recommendations       Json?
  testedBy              String
  testDate              DateTime  @default(now())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tester                User         @relation(fields: [testedBy], references: [id], onDelete: Cascade)

  @@map("accessibility_tests")
}

model AccessibilityTraining {
  id                    String    @id @default(cuid())
  organizationId        String
  trainingType          TrainingType
  title                 String
  description           String
  content               String
  duration              Int       // in minutes
  difficulty            TrainingDifficulty
  prerequisites         String?
  learningObjectives    String[]
  resources             String[]
  assessment            String?
  completionCriteria    String
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  completions           AccessibilityTrainingCompletion[]

  @@map("accessibility_training")
}

model AccessibilityTrainingCompletion {
  id                    String    @id @default(cuid())
  trainingId            String
  userId                String
  completedAt           DateTime  @default(now())
  score                 Float?
  feedback              String?
  certificateUrl        String?

  training              AccessibilityTraining @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([trainingId, userId])
  @@map("accessibility_training_completions")
}

// Enums for Accessibility Compliance
enum ComplianceLevel {
  A
  AA
  AAA
}

enum ComplianceStatus {
  pending
  in_progress
  compliant
  non_compliant
  needs_review
}

enum FindingType {
  keyboard_navigation
  screen_reader
  color_contrast
  text_scaling
  focus_management
  aria_labels
  semantic_html
  multimedia_accessibility
  form_accessibility
  error_handling
}

enum FindingSeverity {
  critical
  high
  medium
  low
  minor
}

enum FindingStatus {
  open
  in_progress
  resolved
  verified
  closed
}

enum RecommendationType {
  technical_implementation
  design_improvement
  content_enhancement
  training_requirement
  policy_update
  tool_implementation
}

enum RecommendationPriority {
  critical
  high
  medium
  low
}

enum RecommendationStatus {
  pending
  in_progress
  completed
  cancelled
}

enum TestType {
  automated
  manual
  user_testing
  screen_reader_testing
  keyboard_testing
  color_contrast_testing
}

enum TrainingType {
  general_accessibility
  wcag_guidelines
  screen_reader_usage
  keyboard_navigation
  color_contrast
  aria_implementation
  testing_methodologies
}

enum TrainingDifficulty {
  beginner
  intermediate
  advanced
  expert
}

// --- Phase 21: Scalability Testing Models ---
model ScalabilityTest {
  id                    String    @id @default(cuid())
  organizationId        String
  testName              String
  testType              ScalabilityTestType
  description           String
  targetConcurrentUsers Int
  testDuration          Int       // in minutes
  testConfiguration     Json
  status                ScalabilityTestStatus
  startedAt             DateTime?
  completedAt           DateTime?
  results               Json?
  performanceMetrics    Json?
  bottlenecks           Json?
  recommendations       Json?
  createdBy             String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator               User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  loadTests             LoadTest[]

  @@map("scalability_tests")
}

model LoadTest {
  id                    String    @id @default(cuid())
  scalabilityTestId     String
  testPhase             String
  concurrentUsers       Int
  requestsPerSecond     Float
  responseTime          Float     // in milliseconds
  errorRate             Float     // percentage
  throughput            Float
  cpuUsage              Float     // percentage
  memoryUsage           Float     // percentage
  databaseConnections   Int
  cacheHitRate          Float     // percentage
  networkLatency        Float     // in milliseconds
  timestamp             DateTime  @default(now())
  metadata              Json?

  scalabilityTest       ScalabilityTest @relation(fields: [scalabilityTestId], references: [id], onDelete: Cascade)

  @@map("load_tests")
}

model PerformanceBenchmark {
  id                    String    @id @default(cuid())
  organizationId        String
  benchmarkName         String
  benchmarkType         BenchmarkType
  description           String
  targetMetrics         Json
  actualMetrics         Json
  performanceScore      Float
  status                BenchmarkStatus
  baselineDate          DateTime
  comparisonDate        DateTime?
  improvements          Json?
  regressions           Json?
  recommendations       Json?
  createdBy             String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator               User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("performance_benchmarks")
}

model SystemResource {
  id                    String    @id @default(cuid())
  organizationId        String
  resourceType          ResourceType
  resourceName          String
  currentUsage          Float
  maxCapacity           Float
  utilizationPercentage Float
  status                ResourceStatus
  alerts                Json?
  metrics               Json
  timestamp             DateTime  @default(now())
  createdAt             DateTime  @default(now())

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("system_resources")
}

model CachePerformance {
  id                    String    @id @default(cuid())
  organizationId        String
  cacheType             CacheType
  cacheKey              String
  hitRate               Float     // percentage
  missRate              Float     // percentage
  evictionRate          Float     // percentage
  averageResponseTime   Float     // in milliseconds
  cacheSize             Int       // in bytes
  maxCacheSize          Int       // in bytes
  memoryUsage           Float     // percentage
  timestamp             DateTime  @default(now())
  createdAt             DateTime  @default(now())

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("cache_performance")
}

model DatabasePerformance {
  id                    String    @id @default(cuid())
  organizationId        String
  databaseName          String
  queryType             QueryType
  averageResponseTime   Float     // in milliseconds
  slowQueries           Int
  totalQueries          Int
  connectionPoolUsage   Float     // percentage
  deadlocks             Int
  lockWaits             Int
  indexUsage            Float     // percentage
  tableScans            Int
  timestamp             DateTime  @default(now())
  createdAt             DateTime  @default(now())

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("database_performance")
}

model OptimizationRecommendation {
  id                    String    @id @default(cuid())
  organizationId        String
  recommendationType    OptimizationType
  priority              OptimizationPriority
  title                 String
  description           String
  currentPerformance    Json
  expectedImprovement   Json
  implementation        String
  estimatedEffort       String
  impact                String
  status                OptimizationStatus
  assignedTo            String?
  dueDate               DateTime?
  completedDate         DateTime?
  results               Json?
  notes                 String?
  createdBy             String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator               User         @relation("OptimizationCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  assignedUser          User?        @relation("OptimizationAssignee", fields: [assignedTo], references: [id])

  @@map("optimization_recommendations")
}

// Enums for Scalability Testing
enum ScalabilityTestType {
  load_testing
  stress_testing
  spike_testing
  volume_testing
  endurance_testing
  capacity_testing
}

enum ScalabilityTestStatus {
  pending
  running
  completed
  failed
  cancelled
}

enum BenchmarkType {
  response_time
  throughput
  resource_utilization
  database_performance
  cache_performance
  api_performance
  user_experience
}

enum BenchmarkStatus {
  pending
  running
  completed
  failed
  baseline
  comparison
}

enum ResourceType {
  cpu
  memory
  disk
  network
  database
  cache
  api_endpoint
  queue
}

enum ResourceStatus {
  healthy
  warning
  critical
  overloaded
  offline
}

enum CacheType {
  redis
  memory
  cdn
  browser
  application
  database
}

enum QueryType {
  select
  insert
  update
  delete
  join
  aggregate
  index_scan
  table_scan
}

enum OptimizationType {
  database_optimization
  cache_optimization
  api_optimization
  resource_scaling
  code_optimization
  infrastructure_optimization
  query_optimization
  indexing_optimization
}

enum OptimizationPriority {
  critical
  high
  medium
  low
}

enum OptimizationStatus {
  pending
  in_progress
  completed
  cancelled
  failed
}

// --- Phase 21: LMS/School System Integration Models ---
model LMSIntegration {
  id                    String    @id @default(cuid())
  organizationId        String
  lmsType               LMSType
  lmsName               String
  baseUrl               String
  apiKey                String?   // Encrypted
  clientId              String?   // For OAuth
  clientSecret          String?   // Encrypted
  accessToken           String?   // Encrypted
  refreshToken          String?   // Encrypted
  tokenExpiresAt        DateTime?
  configuration         Json
  status                IntegrationStatus
  lastSyncAt            DateTime?
  syncFrequency         Int       // in minutes
  autoSync              Boolean   @default(false)
  errorCount            Int       @default(0)
  lastError             String?
  lastErrorAt           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  courses               LMSCourse[]
  enrollments           LMSEnrollment[]
  assignments           LMSAssignment[]
  grades                LMSGrade[]
  syncLogs              LMSSyncLog[]

  @@map("lms_integrations")
}

model LMSCourse {
  id                    String    @id @default(cuid())
  lmsIntegrationId      String
  lmsCourseId           String    // External LMS course ID
  courseName            String
  courseCode            String?
  description           String?
  startDate             DateTime?
  endDate               DateTime?
  status                String?
  enrollmentCount       Int       @default(0)
  lmsData               Json?     // Additional LMS-specific data
  lastSyncAt            DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  lmsIntegration        LMSIntegration @relation(fields: [lmsIntegrationId], references: [id], onDelete: Cascade)
  enrollments           LMSEnrollment[]
  assignments           LMSAssignment[]

  @@unique([lmsIntegrationId, lmsCourseId])
  @@map("lms_courses")
}

model LMSEnrollment {
  id                    String    @id @default(cuid())
  lmsIntegrationId      String
  lmsCourseId           String
  userId                String
  lmsUserId             String?   // External LMS user ID
  enrollmentDate        DateTime?
  status                EnrollmentStatus
  role                  String?   // student, teacher, ta, etc.
  lmsData               Json?     // Additional LMS-specific data
  lastSyncAt            DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  lmsIntegration        LMSIntegration @relation(fields: [lmsIntegrationId], references: [id], onDelete: Cascade)
  course                LMSCourse @relation(fields: [lmsCourseId], references: [id], onDelete: Cascade)
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  grades                LMSGrade[]

  @@unique([lmsIntegrationId, lmsCourseId, userId])
  @@map("lms_enrollments")
}

model LMSAssignment {
  id                    String    @id @default(cuid())
  lmsIntegrationId      String
  lmsCourseId           String
  lmsAssignmentId       String    // External LMS assignment ID
  assignmentName        String
  description           String?
  dueDate               DateTime?
  points                Float?
  assignmentType        String?   // homework, quiz, exam, project, etc.
  status                String?
  lmsData               Json?     // Additional LMS-specific data
  lastSyncAt            DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  lmsIntegration        LMSIntegration @relation(fields: [lmsIntegrationId], references: [id], onDelete: Cascade)
  course                LMSCourse @relation(fields: [lmsCourseId], references: [id], onDelete: Cascade)
  grades                LMSGrade[]

  @@unique([lmsIntegrationId, lmsCourseId, lmsAssignmentId])
  @@map("lms_assignments")
}

model LMSGrade {
  id                    String    @id @default(cuid())
  lmsIntegrationId      String
  lmsEnrollmentId       String
  lmsAssignmentId       String
  userId                String
  grade                 Float?
  maxPoints             Float?
  percentage            Float?
  letterGrade           String?
  feedback              String?
  submittedAt           DateTime?
  gradedAt              DateTime?
  lmsData               Json?     // Additional LMS-specific data
  lastSyncAt            DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  lmsIntegration        LMSIntegration @relation(fields: [lmsIntegrationId], references: [id], onDelete: Cascade)
  enrollment            LMSEnrollment @relation(fields: [lmsEnrollmentId], references: [id], onDelete: Cascade)
  assignment            LMSAssignment @relation(fields: [lmsAssignmentId], references: [id], onDelete: Cascade)
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([lmsIntegrationId, lmsEnrollmentId, lmsAssignmentId])
  @@map("lms_grades")
}

model LMSSyncLog {
  id                    String    @id @default(cuid())
  lmsIntegrationId      String
  syncType              SyncType
  status                SyncStatus
  recordsProcessed      Int       @default(0)
  recordsCreated        Int       @default(0)
  recordsUpdated        Int       @default(0)
  recordsFailed         Int       @default(0)
  errorMessage          String?
  startedAt             DateTime  @default(now())
  completedAt           DateTime?
  duration              Int?      // in milliseconds
  metadata              Json?

  lmsIntegration        LMSIntegration @relation(fields: [lmsIntegrationId], references: [id], onDelete: Cascade)

  @@map("lms_sync_logs")
}

model SSOIntegration {
  id                    String    @id @default(cuid())
  organizationId        String
  ssoType               SSOType
  ssoName               String
  entityId              String?   // SAML Entity ID
  ssoUrl                String?   // SAML SSO URL
  certificate           String?   // SAML Certificate (encrypted)
  clientId              String?   // OAuth Client ID
  clientSecret          String?   // OAuth Client Secret (encrypted)
  redirectUri           String?
  scopes                String[]  // OAuth scopes
  configuration         Json
  status                IntegrationStatus
  lastSyncAt            DateTime?
  autoProvision         Boolean   @default(false)
  errorCount            Int       @default(0)
  lastError             String?
  lastErrorAt           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  ssoUsers              SSOUser[]

  @@map("sso_integrations")
}

model SSOUser {
  id                    String    @id @default(cuid())
  ssoIntegrationId      String
  userId                String
  ssoUserId             String    // External SSO user ID
  ssoUsername           String?
  ssoEmail              String?
  ssoData               Json?     // Additional SSO-specific data
  lastLoginAt           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  ssoIntegration        SSOIntegration @relation(fields: [ssoIntegrationId], references: [id], onDelete: Cascade)
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([ssoIntegrationId, ssoUserId])
  @@map("sso_users")
}

model SISIntegration {
  id                    String    @id @default(cuid())
  organizationId        String
  sisType               SISType
  sisName               String
  baseUrl               String
  apiKey                String?   // Encrypted
  username              String?
  password              String?   // Encrypted
  configuration         Json
  status                IntegrationStatus
  lastSyncAt            DateTime?
  syncFrequency         Int       // in minutes
  autoSync              Boolean   @default(false)
  errorCount            Int       @default(0)
  lastError             String?
  lastErrorAt           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  students              SISStudent[]
  teachers              SISTeacher[]
  classes               SISClass[]
  syncLogs              SISSyncLog[]

  @@map("sis_integrations")
}

model SISStudent {
  id                    String    @id @default(cuid())
  sisIntegrationId      String
  userId                String?
  sisStudentId          String    // External SIS student ID
  studentNumber         String?
  firstName             String
  lastName              String
  email                 String?
  grade                 String?
  schoolYear            String?
  enrollmentStatus      String?
  sisData               Json?     // Additional SIS-specific data
  lastSyncAt            DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  sisIntegration        SISIntegration @relation(fields: [sisIntegrationId], references: [id], onDelete: Cascade)
  user                  User? @relation(fields: [userId], references: [id])
  classes               SISClass[]

  @@unique([sisIntegrationId, sisStudentId])
  @@map("sis_students")
}

model SISTeacher {
  id                    String    @id @default(cuid())
  sisIntegrationId      String
  userId                String?
  sisTeacherId          String    // External SIS teacher ID
  employeeNumber        String?
  firstName             String
  lastName              String
  email                 String?
  department            String?
  sisData               Json?     // Additional SIS-specific data
  lastSyncAt            DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  sisIntegration        SISIntegration @relation(fields: [sisIntegrationId], references: [id], onDelete: Cascade)
  user                  User? @relation(fields: [userId], references: [id])
  classes               SISClass[]

  @@unique([sisIntegrationId, sisTeacherId])
  @@map("sis_teachers")
}

model SISClass {
  id                    String    @id @default(cuid())
  sisIntegrationId      String
  sisClassId            String    // External SIS class ID
  className             String
  classCode             String?
  subject               String?
  grade                 String?
  period                String?
  room                  String?
  teacherId             String?
  enrollmentCount       Int       @default(0)
  sisData               Json?     // Additional SIS-specific data
  lastSyncAt            DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  sisIntegration        SISIntegration @relation(fields: [sisIntegrationId], references: [id], onDelete: Cascade)
  teacher               SISTeacher? @relation(fields: [teacherId], references: [id])
  students              SISStudent[]

  @@unique([sisIntegrationId, sisClassId])
  @@map("sis_classes")
}

model SISSyncLog {
  id                    String    @id @default(cuid())
  sisIntegrationId      String
  syncType              SyncType
  status                SyncStatus
  recordsProcessed      Int       @default(0)
  recordsCreated        Int       @default(0)
  recordsUpdated        Int       @default(0)
  recordsFailed         Int       @default(0)
  errorMessage          String?
  startedAt             DateTime  @default(now())
  completedAt           DateTime?
  duration              Int?      // in milliseconds
  metadata              Json?

  sisIntegration        SISIntegration @relation(fields: [sisIntegrationId], references: [id], onDelete: Cascade)

  @@map("sis_sync_logs")
}

// Enums for LMS/School System Integration
enum LMSType {
  canvas
  blackboard
  google_classroom
  moodle
  schoology
  brightspace
  sakai
  custom
}

enum SSOType {
  saml
  oauth2
  openid_connect
  ldap
  active_directory
  google_workspace
  microsoft_azure
  custom
}

enum SISType {
  powerschool
  infinite_campus
  skyward
  gradelink
  renweb
  schooltool
  custom
}

enum IntegrationStatus {
  active
  inactive
  error
  pending
  configuring
}

enum EnrollmentStatus {
  active
  inactive
  dropped
  completed
  pending
}

enum SyncType {
  full
  incremental
  manual
  scheduled
}

enum SyncStatus {
  pending
  running
  completed
  failed
  cancelled
}

// --- Phase 21: Continuous Monitoring Models ---
model MonitoringDashboard {
  id                    String    @id @default(cuid())
  organizationId        String
  dashboardName         String
  dashboardType         MonitoringDashboardType
  description           String?
  configuration         Json
  isDefault             Boolean   @default(false)
  isPublic              Boolean   @default(false)
  refreshInterval       Int       @default(30) // in seconds
  autoRefresh           Boolean   @default(true)
  createdBy             String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator               User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  widgets               MonitoringWidget[]

  @@map("monitoring_dashboards")
}

model MonitoringWidget {
  id                    String    @id @default(cuid())
  dashboardId           String
  widgetName            String
  widgetType            WidgetType
  position              Json      // {x, y, width, height}
  configuration         Json
  refreshInterval       Int       @default(30) // in seconds
  isVisible             Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  dashboard             MonitoringDashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@map("monitoring_widgets")
}

model SystemMetric {
  id                    String    @id @default(cuid())
  organizationId        String
  metricName            String
  metricType            MetricType
  value                 Float
  unit                  String?
  tags                  Json?     // Additional metadata
  timestamp             DateTime  @default(now())
  createdAt             DateTime  @default(now())

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("system_metrics")
}

model PerformanceMetric {
  id                    String    @id @default(cuid())
  organizationId        String
  endpoint              String
  method                String
  responseTime          Float     // in milliseconds
  statusCode            Int
  requestSize           Int?      // in bytes
  responseSize          Int?      // in bytes
  userAgent             String?
  ipAddress             String?
  userId                String?
  sessionId             String?
  timestamp             DateTime  @default(now())
  createdAt             DateTime  @default(now())

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                  User?        @relation(fields: [userId], references: [id])

  @@map("performance_metrics")
}

model UsageAnalytic {
  id                    String    @id @default(cuid())
  organizationId        String
  userId                String?
  sessionId             String?
  eventType             EventType
  eventName             String
  eventData             Json?
  pageUrl               String?
  referrer              String?
  userAgent             String?
  ipAddress             String?
  timestamp             DateTime  @default(now())
  createdAt             DateTime  @default(now())

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                  User?        @relation(fields: [userId], references: [id])

  @@map("usage_analytics")
}

model HealthCheck {
  id                    String    @id @default(cuid())
  organizationId        String
  checkName             String
  checkType             HealthCheckType
  status                HealthStatus
  responseTime          Float?    // in milliseconds
  errorMessage          String?
  metadata              Json?
  lastCheckedAt         DateTime  @default(now())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("health_checks")
}

model Alert {
  id                    String    @id @default(cuid())
  organizationId        String
  alertName             String
  alertType             AlertType
  severity              AlertSeverity
  status                AlertStatus
  message               String
  description           String?
  source                String?   // What triggered the alert
  metadata              Json?
  acknowledgedBy        String?
  acknowledgedAt        DateTime?
  resolvedBy            String?
  resolvedAt            DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  acknowledgedUser      User?        @relation("AlertAcknowledgedBy", fields: [acknowledgedBy], references: [id])
  resolvedUser          User?        @relation("AlertResolvedBy", fields: [resolvedBy], references: [id])

  @@map("alerts")
}

model MonitoringRule {
  id                    String    @id @default(cuid())
  organizationId        String
  ruleName              String
  ruleType              RuleType
  condition             Json      // Rule condition configuration
  threshold             Float?
  operator              ComparisonOperator
  isEnabled             Boolean   @default(true)
  alertSeverity         AlertSeverity
  notificationChannels  String[]  // Email, Slack, Webhook, etc.
  cooldownPeriod        Int       @default(300) // in seconds
  lastTriggeredAt       DateTime?
  triggerCount          Int       @default(0)
  createdBy             String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator               User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("monitoring_rules")
}

model NotificationChannel {
  id                    String    @id @default(cuid())
  organizationId        String
  channelName           String
  channelType           NotificationChannelType
  configuration         Json
  isEnabled             Boolean   @default(true)
  isDefault             Boolean   @default(false)
  createdBy             String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator               User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("notification_channels")
}

model MonitoringReport {
  id                    String    @id @default(cuid())
  organizationId        String
  reportName            String
  reportType            ReportType
  period                String    // daily, weekly, monthly, custom
  startDate             DateTime
  endDate               DateTime
  data                  Json      // Report data
  status                ReportStatus
  generatedBy           String
  generatedAt           DateTime  @default(now())
  createdAt             DateTime  @default(now())

  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  generator             User         @relation(fields: [generatedBy], references: [id], onDelete: Cascade)

  @@map("monitoring_reports")
}

// Enums for Continuous Monitoring
enum MonitoringDashboardType {
  system_overview
  performance_monitoring
  usage_analytics
  health_monitoring
  custom
}

enum WidgetType {
  metric_chart
  line_chart
  bar_chart
  pie_chart
  gauge
  table
  alert_list
  health_status
  custom
}

enum MetricType {
  counter
  gauge
  histogram
  summary
  custom
}

enum EventType {
  page_view
  user_action
  api_call
  error
  performance
  custom
}

enum HealthCheckType {
  api_endpoint
  database
  external_service
  system_resource
  custom
}

enum HealthStatus {
  healthy
  warning
  critical
  unknown
}

enum AlertType {
  threshold_breach
  error_rate
  performance_degradation
  system_down
  custom
}

enum AlertSeverity {
  info
  warning
  critical
  emergency
}

enum AlertStatus {
  active
  acknowledged
  resolved
  suppressed
}

enum RuleType {
  metric_threshold
  error_rate
  response_time
  availability
  custom
}

enum ComparisonOperator {
  greater_than
  less_than
  equal_to
  not_equal_to
  greater_than_or_equal
  less_than_or_equal
}

enum NotificationChannelType {
  email
  slack
  webhook
  sms
  push_notification
  custom
}

enum ReportType {
  performance_summary
  usage_analytics
  system_health
  error_analysis
  custom
}

enum ReportStatus {
  generating
  completed
  failed
}

// Smart Teaching Session Management
model SmartTeachingSession {
  id          String   @id @default(cuid())
  studentId   String
  lessonId    String
  startedAt   DateTime @default(now())
  completedAt DateTime?
  status      SmartTeachingSessionStatus @default(active)
  progress    Json?     // Real-time progress tracking
  metadata    Json?     // Additional session data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  interactions SmartTeachingInteraction[]
  assessments SmartTeachingAssessment[]
  
  @@unique([studentId, lessonId])
  @@index([studentId, status])
  @@index([lessonId, status])
}

model SmartTeachingInteraction {
  id        String   @id @default(cuid())
  sessionId String
  type      SmartTeachingInteractionType
  content   Json
  timestamp DateTime @default(now())
  metadata  Json?
  
  session   SmartTeachingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId, timestamp])
  @@index([type, timestamp])
}

model SmartTeachingAssessment {
  id        String   @id @default(cuid())
  sessionId String
  assessmentId String
  startedAt DateTime @default(now())
  completedAt DateTime?
  score     Float?
  status    AssessmentStatus @default(not_started)
  responses Json?    // Student responses
  feedback  Json?    // AI-generated feedback
  
  session   SmartTeachingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  @@unique([sessionId, assessmentId])
  @@index([sessionId, status])
}

model GeneratedContent {
  id          String   @id @default(cuid())
  lessonId    String
  contentType ContentType
  content     Json
  metadata    Json?
  quality     Float?   // AI-generated quality score
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@index([lessonId, contentType])
  @@index([contentType, quality])
}

enum SmartTeachingSessionStatus {
  active
  paused
  completed
  abandoned
}

enum SmartTeachingInteractionType {
  content_view
  content_interaction
  question_asked
  answer_provided
  hint_requested
  method_change
  difficulty_adjustment
  assessment_started
  assessment_completed
  feedback_provided
  adaptive_question_generated
  progress_update
}

enum AssessmentStatus {
  not_started
  in_progress
  completed
  abandoned
}

enum ContentType {
  text
  math
  diagram
  simulation
  video
  audio
  interactive
  three_d
  advanced_three_d
  d3_advanced
  assessment
  feedback
  full
}
