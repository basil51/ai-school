generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                   String                            @id @default(cuid())
  email                                String                            @unique
  name                                 String?
  password                             String?
  role                                 Role                              @default(student)
  organizationId                       String?
  createdAt                            DateTime                          @default(now())
  updatedAt                            DateTime                          @default(now()) @updatedAt
  abTestExperiments                    ABTestExperiment[]
  abTestParticipants                   ABTestParticipant[]
  accessibilityAudits                  AccessibilityAudit[]
  accessibilityIssues                  AccessibilityIssue[]
  accounts                             Account[]
  adaptiveAssessments                  AdaptiveAssessment[]
  analyticsDashboards                  AnalyticsDashboard[]
  assessmentAttempts                   AssessmentAttempt[]
  assessmentPredictions                AssessmentPrediction[]
  teacherAssignments                   Assignment[]                      @relation("TeacherAssignment")
  teacherAttendance                    Attendance[]                      @relation("TeacherAttendance")
  studentAttendance                    Attendance[]                      @relation("StudentAttendance")
  auditLogs                            AuditLog[]
  sentMessages                         ChatMessage[]
  chatParticipants                     ChatParticipant[]
  crossDomainConnections               CrossDomainConnection[]
  emailLogs                            EmailLog[]
  emailPreferences                     EmailPreference?
  emotionalStates                      EmotionalState[]
  engagementOptimizations              EngagementOptimization[]
  failureAnalyses                      FailureAnalysis[]
  teacherGrades                        Grade[]                           @relation("TeacherGrade")
  studentGrades                        Grade[]                           @relation("StudentGrade")
  guardianInsights                     GuardianInsight[]                 @relation("GuardianInsight")
  studentInsights                      GuardianInsight[]                 @relation("StudentInsight")
  guardianRelationships                GuardianRelationship[]            @relation("GuardianUser")
  studentRelationships                 GuardianRelationship[]            @relation("StudentUser")
  inclusivityAudits                    InclusivityAudit[]
  inclusivityFindings                  InclusivityFinding[]
  knowledgeRetention                   KnowledgeRetention[]
  learningAnalytics                    LearningAnalytics[]
  learningCurves                       LearningCurve[]
  learningDimensions                   LearningDimensions?
  learningGaps                         LearningGap[]
  learningInterventions                LearningIntervention[]
  learningOutcomePredictions           LearningOutcomePrediction[]
  learningPatterns                     LearningPattern[]
  learningSessions                     LearningSession[]
  studentAdaptations                   LessonAdaptation[]
  neuralPathways                       NeuralPathway[]
  performanceKPIs                      PerformanceKPI[]
  personalizationData                  PersonalizationData?
  phase3LearningAnalytics              Phase3LearningAnalytics[]
  phase3PerformanceMetricsStudent      Phase3PerformanceMetrics[]        @relation("Phase3PerformanceStudent")
  phase3PerformanceMetricsTeacher      Phase3PerformanceMetrics[]        @relation("Phase3PerformanceTeacher")
  generatedReports                     Phase3ProgressReport[]            @relation("ReportGeneratedBy")
  phase3ProgressReports                Phase3ProgressReport[]
  predictiveAnalytics                  PredictiveAnalytics[]
  progressReports                      ProgressReport[]
  realTimeProgress                     RealTimeProgress[]
  scheduledReports                     ScheduledReport[]
  securityAudits                       SecurityAudit[]
  sessions                             Session[]
  smartTeachingSessions                SmartTeachingSession[]
  studentEnrollments                   StudentEnrollment[]
  studentPerformance                   StudentPerformance[]
  studentProfile                       StudentProfile?
  studentProgress                      StudentProgress[]
  successMetrics                       SuccessMetrics[]
  teachingEffectiveness                TeachingEffectiveness[]
  organization                         Organization?                     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  accessibilityProfile                 UserAccessibilityProfile?
  feedbackAssigned                     UserFeedback[]                    @relation("FeedbackAssignee")
  userFeedback                         UserFeedback[]
  accessibilityComplianceAudits        AccessibilityCompliance[]
  accessibilityFindingsAssigned        AccessibilityFinding[]
  accessibilityRecommendationsAssigned AccessibilityRecommendation[]
  accessibilityTests                   AccessibilityTest[]
  accessibilityTrainingCompletions     AccessibilityTrainingCompletion[]
  alertsAcknowledged                   Alert[]                           @relation("AlertAcknowledgedBy")
  alertsResolved                       Alert[]                           @relation("AlertResolvedBy")
  lmsEnrollments                       LMSEnrollment[]
  lmsGrades                            LMSGrade[]
  monitoringDashboards                 MonitoringDashboard[]
  monitoringReports                    MonitoringReport[]
  monitoringRules                      MonitoringRule[]
  notificationChannels                 NotificationChannel[]
  optimizationRecommendationsAssigned  OptimizationRecommendation[]      @relation("OptimizationAssignee")
  optimizationRecommendationsCreated   OptimizationRecommendation[]      @relation("OptimizationCreator")
  performanceBenchmarks                PerformanceBenchmark[]
  performanceMetrics                   PerformanceMetric[]
  scalabilityTests                     ScalabilityTest[]
  sisStudents                          SISStudent[]
  sisTeachers                          SISTeacher[]
  ssoUsers                             SSOUser[]
  usageAnalytics                       UsageAnalytic[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id                          String                       @id @default(cuid())
  name                        String
  slug                        String                       @unique
  description                 String?
  tier                        OrganizationTier             @default(free)
  domain                      String?                      @unique
  logoUrl                     String?
  primaryColor                String?                      @default("#2563eb")
  isActive                    Boolean                      @default(true)
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  monthlyQuestions            Int                          @default(0)
  monthlyDocuments            Int                          @default(0)
  storageUsed                 BigInt                       @default(0)
  assignments                 Assignment[]
  attendance                  Attendance[]
  auditLogs                   AuditLog[]
  chatRooms                   ChatRoom[]
  grades                      Grade[]
  gradeCategories             GradeCategory[]
  inclusivityAudits           InclusivityAudit[]
  learningSessions            LearningSession[]
  settings                    OrganizationSettings?
  phase3PerformanceMetrics    Phase3PerformanceMetrics[]
  documents                   RagDocument[]
  scheduledReports            ScheduledReport[]
  securityAudits              SecurityAudit[]
  studentPerformance          StudentPerformance[]
  subjects                    Subject[]
  teachingEffectiveness       TeachingEffectiveness[]
  users                       User[]
  userAccessibilityProfiles   UserAccessibilityProfile[]
  accessibilityCompliance     AccessibilityCompliance[]
  accessibilityTests          AccessibilityTest[]
  accessibilityTraining       AccessibilityTraining[]
  alerts                      Alert[]
  cachePerformance            CachePerformance[]
  databasePerformance         DatabasePerformance[]
  healthChecks                HealthCheck[]
  lmsIntegrations             LMSIntegration[]
  monitoringDashboards        MonitoringDashboard[]
  monitoringReports           MonitoringReport[]
  monitoringRules             MonitoringRule[]
  notificationChannels        NotificationChannel[]
  optimizationRecommendations OptimizationRecommendation[]
  performanceBenchmarks       PerformanceBenchmark[]
  performanceMetrics          PerformanceMetric[]
  scalabilityTests            ScalabilityTest[]
  sisIntegrations             SISIntegration[]
  ssoIntegrations             SSOIntegration[]
  systemMetrics               SystemMetric[]
  systemResources             SystemResource[]
  usageAnalytics              UsageAnalytic[]
}

model OrganizationSettings {
  id                    String       @id @default(cuid())
  organizationId        String       @unique
  ragEnabled            Boolean      @default(true)
  guardianEmailsEnabled Boolean      @default(true)
  evaluationsEnabled    Boolean      @default(false)
  maxUsers              Int          @default(50)
  maxDocuments          Int          @default(10)
  maxQuestionsPerMonth  Int          @default(1000)
  maxStorageBytes       BigInt       @default(1073741824)
  welcomeMessage        String?
  customCss             String?
  emailFromName         String?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @default(now()) @updatedAt
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model RagDocument {
  id             String        @id @default(cuid())
  title          String
  content        String
  length         Int
  organizationId String?
  subject        String?
  topic          String?
  difficulty     String?
  learningStyle  String?
  estimatedTime  Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  chunks         RagChunk[]
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model RagChunk {
  id        String                @id @default(cuid())
  docId     String
  content   String
  embedding Unsupported("vector")
  createdAt DateTime              @default(now())
  document  RagDocument           @relation(fields: [docId], references: [id], onDelete: Cascade)
}

model GuardianRelationship {
  id         String                     @id @default(cuid())
  guardianId String
  studentId  String
  status     GuardianRelationshipStatus @default(pending)
  createdAt  DateTime                   @default(now())
  updatedAt  DateTime                   @updatedAt
  guardian   User                       @relation("GuardianUser", fields: [guardianId], references: [id], onDelete: Cascade)
  student    User                       @relation("StudentUser", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([guardianId, studentId])
}

model EmailPreference {
  id                    String         @id @default(cuid())
  userId                String         @unique
  weeklyProgressEnabled Boolean        @default(true)
  emailFrequency        EmailFrequency @default(weekly)
  lastEmailSent         DateTime?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  user                  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProgressReport {
  id             String   @id @default(cuid())
  userId         String
  reportDate     DateTime @default(now())
  sessionsCount  Int      @default(0)
  questionsAsked Int      @default(0)
  topicsCovered  String[]
  timeSpent      Int      @default(0)
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Phase3ProgressReport {
  id              String   @id @default(cuid())
  studentId       String
  reportType      String
  periodStart     DateTime
  periodEnd       DateTime
  generatedBy     String?
  summary         String
  keyMetrics      Json
  achievements    String[]
  improvements    String[]
  recommendations String[]
  goals           String[]
  parentNotes     String?
  isShared        Boolean  @default(false)
  sharedWith      String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  generatedByUser User?    @relation("ReportGeneratedBy", fields: [generatedBy], references: [id])
  student         User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, reportType])
  @@index([periodStart, periodEnd])
}

model EmailTemplate {
  id          String     @id @default(cuid())
  name        String     @unique
  subject     String
  htmlContent String
  textContent String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  emailLogs   EmailLog[]
}

model EmailLog {
  id           String         @id @default(cuid())
  recipientId  String
  templateId   String?
  subject      String
  content      String
  status       EmailStatus    @default(sent)
  sentAt       DateTime       @default(now())
  errorMessage String?
  recipient    User           @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  template     EmailTemplate? @relation(fields: [templateId], references: [id])
}

model AuditLog {
  id             String        @id @default(cuid())
  organizationId String?
  userId         String?
  action         String
  resource       String?
  resourceId     String?
  details        Json?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime      @default(now())
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?         @relation(fields: [userId], references: [id])
}

model ScheduledReport {
  id             String          @id @default(cuid())
  organizationId String
  name           String
  description    String?
  frequency      ReportFrequency
  dayOfWeek      Int?
  dayOfMonth     Int?
  time           String
  isActive       Boolean         @default(true)
  recipients     String[]
  metrics        String[]
  format         ReportFormat
  lastSent       DateTime?
  nextScheduled  DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdBy      String
  createdByUser  User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Attendance {
  id             String           @id @default(cuid())
  organizationId String
  studentId      String
  date           DateTime         @db.Date
  status         AttendanceStatus @default(present)
  checkInTime    DateTime?
  checkOutTime   DateTime?
  notes          String?
  recordedBy     String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  recordedByUser User             @relation("TeacherAttendance", fields: [recordedBy], references: [id], onDelete: Cascade)
  student        User             @relation("StudentAttendance", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, date])
  @@index([organizationId, date])
  @@index([studentId, date])
}

model GradeCategory {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  description    String?
  weight         Float        @default(1.0)
  color          String?      @default("#3b82f6")
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  assignments    Assignment[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name])
}

model Assignment {
  id             String        @id @default(cuid())
  organizationId String
  categoryId     String
  title          String
  description    String?
  dueDate        DateTime?
  totalPoints    Float         @default(100.0)
  isActive       Boolean       @default(true)
  createdBy      String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  category       GradeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdByUser  User          @relation("TeacherAssignment", fields: [createdBy], references: [id], onDelete: Cascade)
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  grades         Grade[]

  @@index([organizationId, dueDate])
}

model Grade {
  id             String       @id @default(cuid())
  organizationId String
  studentId      String
  assignmentId   String
  score          Float
  maxScore       Float
  percentage     Float
  letterGrade    String?
  feedback       String?
  gradedBy       String
  gradedAt       DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  assignment     Assignment   @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  gradedByUser   User         @relation("TeacherGrade", fields: [gradedBy], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  student        User         @relation("StudentGrade", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, assignmentId])
  @@index([organizationId, studentId])
  @@index([assignmentId])
}

model StudentPerformance {
  id                   String            @id @default(cuid())
  organizationId       String
  studentId            String
  period               PerformancePeriod
  startDate            DateTime          @db.Date
  endDate              DateTime          @db.Date
  totalDays            Int               @default(0)
  presentDays          Int               @default(0)
  absentDays           Int               @default(0)
  lateDays             Int               @default(0)
  attendanceRate       Float             @default(0.0)
  totalAssignments     Int               @default(0)
  completedAssignments Int               @default(0)
  averageGrade         Float             @default(0.0)
  highestGrade         Float             @default(0.0)
  lowestGrade          Float             @default(0.0)
  gpa                  Float             @default(0.0)
  rank                 Int?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  organization         Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  student              User              @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([organizationId, studentId, period, startDate])
  @@index([organizationId, period, startDate])
}

model AdvancedTeachingMethod {
  id                  String                  @id @default(cuid())
  name                String                  @unique
  description         String
  pedagogicalApproach String
  cognitiveLoad       String
  engagementLevel     String
  retentionRate       Float
  prerequisites       String[]
  bestFor             String[]
  examples            String[]
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  effectiveness       TeachingEffectiveness[]
}

model EnhancedContent {
  id                  String               @id @default(cuid())
  title               String
  content             String
  subject             String
  topic               String
  difficulty          String
  modality            ContentModality
  length              ContentLength
  learningObjectives  String[]
  prerequisites       String[]
  keyConcepts         String[]
  examples            String[]
  estimatedTime       Int
  quality             Float                @default(0.0)
  accessibility       Boolean              @default(true)
  seoOptimized        Boolean              @default(false)
  tags                String[]
  language            String               @default("en")
  culturalContext     String               @default("universal")
  generatedAt         DateTime             @default(now())
  version             String               @default("1.0")
  assessmentQuestions AssessmentQuestion[]
  audioElements       AudioElement[]
  exercises           Exercise[]
  interactiveElements InteractiveElement[]
  visualElements      VisualElement[]

  @@index([subject, topic])
  @@index([difficulty])
  @@index([modality])
}

model VisualElement {
  id              String          @id @default(cuid())
  contentId       String
  type            String
  description     String
  content         String
  position        Int
  interactive     Boolean         @default(false)
  enhancedContent EnhancedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model InteractiveElement {
  id              String          @id @default(cuid())
  contentId       String
  type            String
  title           String
  description     String
  content         String
  position        Int
  difficulty      String
  enhancedContent EnhancedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model AudioElement {
  id              String          @id @default(cuid())
  contentId       String
  type            String
  text            String
  duration        Int
  position        Int
  language        String          @default("en")
  enhancedContent EnhancedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model AssessmentQuestion {
  id              String          @id @default(cuid())
  contentId       String
  type            String
  question        String
  options         String[]
  correctAnswer   String
  explanation     String
  difficulty      String
  points          Float           @default(1.0)
  enhancedContent EnhancedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model Exercise {
  id              String          @id @default(cuid())
  contentId       String
  type            String
  title           String
  description     String
  instructions    String
  expectedOutcome String
  hints           String[]
  solution        String
  enhancedContent EnhancedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model LearningSession {
  id             String        @id @default(cuid())
  organizationId String
  studentId      String
  subject        String
  topic          String
  sessionData    Json
  startTime      DateTime
  endTime        DateTime?
  status         SessionStatus @default(active)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  student        User          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([studentId])
  @@index([status])
  @@index([startTime])
}

model TeachingEffectiveness {
  id                 String                 @id @default(cuid())
  organizationId     String
  studentId          String
  methodId           String
  effectiveness      Float
  completionRate     Float
  assessmentScore    Float
  engagementLevel    Float
  retentionRate      Float
  recommendations    String[]
  alternativeMethods String[]
  analyzedAt         DateTime               @default(now())
  method             AdvancedTeachingMethod @relation(fields: [methodId], references: [id], onDelete: Cascade)
  organization       Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  student            User                   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([studentId])
  @@index([methodId])
}

model PerformanceMetrics {
  id                  String   @id @default(cuid())
  systemHealth        Float
  responseTime        Float
  cacheHitRate        Float
  adaptationAccuracy  Float
  studentSatisfaction Float
  learningOutcomes    Float
  systemUptime        Float
  recordedAt          DateTime @default(now())
}

model ContentCache {
  id        String   @id @default(cuid())
  cacheKey  String
  content   String
  context   Json
  ttl       Int
  tags      String[]
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([cacheKey])
  @@index([expiresAt])
}

model SecurityAudit {
  id             String       @id @default(cuid())
  organizationId String
  type           String
  userId         String?
  action         String
  resource       String
  ipAddress      String
  userAgent      String
  success        Boolean
  details        Json
  timestamp      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
  @@index([type])
  @@index([timestamp])
  @@index([success])
}

model ScalabilityMetrics {
  id                  String   @id @default(cuid())
  currentUsers        Int
  peakUsers           Int
  requestsPerSecond   Float
  averageResponseTime Float
  databaseConnections Int
  cacheHitRate        Float
  memoryUsage         Float
  cpuUsage            Float
  errorRate           Float
  throughput          Float
  recordedAt          DateTime @default(now())

  @@index([recordedAt])
}

model ChatRoom {
  id             String            @id @default(cuid())
  organizationId String
  name           String            @default("General")
  description    String?
  isActive       Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  messages       ChatMessage[]
  participants   ChatParticipant[]
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name])
  @@index([organizationId, isActive])
}

model ChatMessage {
  id          String      @id @default(cuid())
  roomId      String
  senderId    String
  content     String
  messageType MessageType @default(text)
  isEdited    Boolean     @default(false)
  editedAt    DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  room        ChatRoom    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender      User        @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([roomId, createdAt])
  @@index([senderId, createdAt])
}

model ChatParticipant {
  id         String    @id @default(cuid())
  roomId     String
  userId     String
  joinedAt   DateTime  @default(now())
  lastReadAt DateTime?
  isActive   Boolean   @default(true)
  room       ChatRoom  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@index([userId, isActive])
}

model Subject {
  id                         String                      @id @default(cuid())
  name                       String
  description                String?
  level                      SubjectLevel
  isActive                   Boolean                     @default(true)
  organizationId             String?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @default(now()) @updatedAt
  adaptiveAssessments        AdaptiveAssessment[]
  assessmentPredictions      AssessmentPrediction[]
  knowledgeRetention         KnowledgeRetention[]
  learningCurves             LearningCurve[]
  learningGaps               LearningGap[]
  learningOutcomePredictions LearningOutcomePrediction[]
  performanceKPIs            PerformanceKPI[]
  phase3LearningAnalytics    Phase3LearningAnalytics[]
  enrollments                StudentEnrollment[]
  organization               Organization?               @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  successMetrics             SuccessMetrics[]
  topics                     Topic[]

  @@unique([organizationId, name])
  @@index([organizationId, isActive])
}

model Topic {
  id           String        @id @default(cuid())
  subjectId    String
  name         String
  description  String?
  order        Int
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  learningGaps LearningGap[]
  lessons      Lesson[]
  subject      Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([subjectId, name])
  @@index([subjectId, order])
}

model Lesson {
  id                    String                 @id @default(cuid())
  topicId               String
  title                 String
  content               String
  objectives            String[]
  difficulty            DifficultyLevel
  estimatedTime         Int
  order                 Int
  isActive              Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  assessments           Assessment[]
  generatedContent      GeneratedContent[]
  topic                 Topic                  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  adaptations           LessonAdaptation[]
  prerequisites         LessonPrerequisite[]
  prerequisiteFor       LessonPrerequisite[]   @relation("Prerequisite")
  realTimeProgress      RealTimeProgress[]
  smartTeachingSessions SmartTeachingSession[]
  progress              StudentProgress[]

  @@unique([topicId, title])
  @@index([topicId, order])
}

model LessonPrerequisite {
  id             String   @id @default(cuid())
  lessonId       String
  prerequisiteId String
  createdAt      DateTime @default(now())
  lesson         Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  prerequisite   Lesson   @relation("Prerequisite", fields: [prerequisiteId], references: [id], onDelete: Cascade)

  @@unique([lessonId, prerequisiteId])
}

model StudentEnrollment {
  id          String    @id @default(cuid())
  studentId   String
  subjectId   String
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  student     User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject     Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([studentId, subjectId])
  @@index([studentId, isActive])
}

model StudentProgress {
  id          String         @id @default(cuid())
  studentId   String
  lessonId    String
  status      ProgressStatus @default(not_started)
  startedAt   DateTime?
  completedAt DateTime?
  timeSpent   Int            @default(0)
  attempts    Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student     User           @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, lessonId])
  @@index([studentId, status])
}

model RealTimeProgress {
  id               String    @id @default(cuid())
  studentId        String
  sessionId        String
  lessonId         String?
  activityType     String
  activityId       String?
  startTime        DateTime  @default(now())
  endTime          DateTime?
  duration         Int       @default(0)
  engagementLevel  Float     @default(0.0)
  interactionCount Int       @default(0)
  focusTime        Int       @default(0)
  distractionCount Int       @default(0)
  completionRate   Float     @default(0.0)
  accuracy         Float?
  difficulty       String?
  learningStyle    String?
  emotionalState   String?
  metadata         Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lesson           Lesson?   @relation(fields: [lessonId], references: [id])
  student          User      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, startTime])
  @@index([sessionId])
  @@index([activityType, startTime])
}

model Phase3LearningAnalytics {
  id                     String   @id @default(cuid())
  studentId              String
  subjectId              String?
  timeframe              String
  periodStart            DateTime
  periodEnd              DateTime
  totalLearningTime      Int      @default(0)
  totalSessions          Int      @default(0)
  averageSessionLength   Float    @default(0.0)
  averageEngagement      Float    @default(0.0)
  lessonsCompleted       Int      @default(0)
  assessmentsCompleted   Int      @default(0)
  averageAccuracy        Float    @default(0.0)
  improvementRate        Float    @default(0.0)
  learningVelocity       Float    @default(0.0)
  retentionRate          Float    @default(0.0)
  difficultyProgression  Float    @default(0.0)
  preferredLearningTime  String?
  preferredLearningStyle String?
  strengths              String[]
  weaknesses             String[]
  goals                  String[]
  achievements           String[]
  recommendations        Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  student                User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject                Subject? @relation(fields: [subjectId], references: [id])

  @@unique([studentId, subjectId, timeframe, periodStart])
  @@index([studentId, periodStart])
  @@index([timeframe, periodStart])
}

model Phase3PerformanceMetrics {
  id             String        @id @default(cuid())
  studentId      String?
  teacherId      String?
  organizationId String?
  metricType     String
  metricName     String
  metricValue    Float
  metricUnit     String?
  context        Json?
  timestamp      DateTime      @default(now())
  sessionId      String?
  lessonId       String?
  assessmentId   String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  student        User?         @relation("Phase3PerformanceStudent", fields: [studentId], references: [id], onDelete: Cascade)
  teacher        User?         @relation("Phase3PerformanceTeacher", fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([metricType, timestamp])
  @@index([studentId, timestamp])
  @@index([organizationId, timestamp])
}

model LearningOutcomePrediction {
  id              String   @id @default(cuid())
  studentId       String
  subjectId       String?
  predictionType  String
  predictedValue  Float
  confidence      Float
  timeframe       String
  predictionDate  DateTime @default(now())
  targetDate      DateTime
  factors         Json
  recommendations String[]
  actualOutcome   Float?
  accuracy        Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  student         User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject         Subject? @relation(fields: [subjectId], references: [id])

  @@index([studentId, predictionType, targetDate])
  @@index([predictionType, predictionDate])
}

model StudentProfile {
  id              String    @id @default(cuid())
  studentId       String    @unique
  learningStyle   Json
  preferredPace   PaceLevel @default(moderate)
  strengthAreas   String[]
  weaknessAreas   String[]
  motivationLevel Float     @default(0.5)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  student         User      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
}

model LessonAdaptation {
  id               String   @id @default(cuid())
  studentId        String
  lessonId         String
  originalContent  String
  adaptedContent   String
  adaptationReason String
  effectiveness    Float?
  createdAt        DateTime @default(now())
  lesson           Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student          User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, lessonId])
}

model Assessment {
  id                       String                    @id @default(cuid())
  lessonId                 String
  type                     AssessmentType
  title                    String
  instructions             String
  timeLimit                Int?
  passingScore             Float                     @default(0.7)
  maxAttempts              Int                       @default(3)
  isActive                 Boolean                   @default(true)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  lesson                   Lesson                    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  attempts                 AssessmentAttempt[]
  failureAnalysis          FailureAnalysis[]
  questions                Question[]
  smartTeachingAssessments SmartTeachingAssessment[]

  @@index([lessonId, type])
}

model Question {
  id            String            @id @default(cuid())
  assessmentId  String
  type          QuestionType
  content       String
  points        Float             @default(1.0)
  correctAnswer String?
  explanation   String?
  order         Int
  isActive      Boolean           @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  assessment    Assessment        @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  options       QuestionOption[]
  responses     StudentResponse[]

  @@index([assessmentId, order])
}

model QuestionOption {
  id         String   @id @default(cuid())
  questionId String
  content    String
  isCorrect  Boolean  @default(false)
  order      Int
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId, order])
}

model AssessmentAttempt {
  id           String            @id @default(cuid())
  studentId    String
  assessmentId String
  startedAt    DateTime          @default(now())
  completedAt  DateTime?
  score        Float?
  feedback     String?
  passed       Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  assessment   Assessment        @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  student      User              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  responses    StudentResponse[]

  @@index([studentId, assessmentId])
  @@index([studentId, passed])
}

model StudentResponse {
  id           String            @id @default(cuid())
  attemptId    String
  questionId   String
  answer       String
  isCorrect    Boolean?
  pointsEarned Float             @default(0.0)
  feedback     String?
  timeSpent    Int               @default(0)
  createdAt    DateTime          @default(now())
  attempt      AssessmentAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question     Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
}

model AdaptiveAssessment {
  id                String              @id @default(cuid())
  studentId         String
  subjectId         String
  sessionType       AdaptiveSessionType
  currentLevel      Int                 @default(1)
  totalQuestions    Int                 @default(0)
  correctAnswers    Int                 @default(0)
  currentDifficulty Float               @default(0.5)
  confidence        Float               @default(0.5)
  isActive          Boolean             @default(true)
  startedAt         DateTime            @default(now())
  completedAt       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  analytics         AdaptiveAnalytics[]
  student           User                @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject           Subject             @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  questions         AdaptiveQuestion[]
  responses         AdaptiveResponse[]

  @@index([studentId, isActive])
  @@index([subjectId, sessionType])
}

model AdaptiveQuestion {
  id                   String               @id @default(cuid())
  adaptiveAssessmentId String
  questionType         AdaptiveQuestionType
  content              Json
  difficulty           Float
  estimatedTime        Int
  learningObjective    String?
  cognitiveLevel       CognitiveLevel
  isAnswered           Boolean              @default(false)
  order                Int
  createdAt            DateTime             @default(now())
  adaptiveAssessment   AdaptiveAssessment   @relation(fields: [adaptiveAssessmentId], references: [id], onDelete: Cascade)
  responses            AdaptiveResponse[]

  @@index([adaptiveAssessmentId, order])
}

model AdaptiveResponse {
  id                   String             @id @default(cuid())
  adaptiveAssessmentId String
  questionId           String
  answer               Json
  isCorrect            Boolean?
  confidence           Float?
  timeSpent            Int
  hintsUsed            Int                @default(0)
  attempts             Int                @default(1)
  aiFeedback           String?
  createdAt            DateTime           @default(now())
  adaptiveAssessment   AdaptiveAssessment @relation(fields: [adaptiveAssessmentId], references: [id], onDelete: Cascade)
  question             AdaptiveQuestion   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([adaptiveAssessmentId, questionId])
}

model AdaptiveAnalytics {
  id                   String              @id @default(cuid())
  adaptiveAssessmentId String
  metricType           AnalyticsMetricType
  value                Float
  metadata             Json?
  timestamp            DateTime            @default(now())
  adaptiveAssessment   AdaptiveAssessment  @relation(fields: [adaptiveAssessmentId], references: [id], onDelete: Cascade)

  @@index([adaptiveAssessmentId, metricType])
}

model AssessmentPrediction {
  id             String         @id @default(cuid())
  studentId      String
  subjectId      String
  predictionType PredictionType
  predictedScore Float
  confidence     Float
  factors        Json
  actualScore    Float?
  accuracy       Float?
  createdAt      DateTime       @default(now())
  validatedAt    DateTime?
  student        User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject        Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@index([studentId, predictionType])
  @@index([subjectId, createdAt])
}

model LearningGap {
  id                 String      @id @default(cuid())
  studentId          String
  subjectId          String
  topicId            String?
  gapType            GapType
  severity           GapSeverity
  description        String
  recommendedActions Json
  isResolved         Boolean     @default(false)
  resolvedAt         DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  student            User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject            Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  topic              Topic?      @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([studentId, isResolved])
  @@index([subjectId, gapType])
}

model FailureAnalysis {
  id           String      @id @default(cuid())
  studentId    String
  assessmentId String
  failureType  FailureType
  diagnosis    String
  remediation  String
  resolved     Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  assessment   Assessment  @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  student      User        @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, resolved])
}

model LearningAnalytics {
  id               String   @id @default(cuid())
  studentId        String
  dateRange        DateTime @db.Date
  conceptsMastered Int      @default(0)
  timeSpent        Int
  assessmentScores Float[]
  strugglingTopics String[]
  improvingTopics  String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  student          User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, dateRange])
  @@index([studentId, dateRange])
}

model PersonalizationData {
  id                    String   @id @default(cuid())
  studentId             String   @unique
  effectiveStrategies   Json
  ineffectiveStrategies Json
  optimalDifficulty     Json
  contentPreferences    Json
  studyPatterns         Json
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  student               User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model SuccessMetrics {
  id                String            @id @default(cuid())
  studentId         String
  subjectId         String
  period            PerformancePeriod
  startDate         DateTime          @db.Date
  endDate           DateTime          @db.Date
  totalLessons      Int               @default(0)
  completedLessons  Int               @default(0)
  completionRate    Float             @default(0.0)
  totalAssessments  Int               @default(0)
  passedAssessments Int               @default(0)
  masteryRate       Float             @default(0.0)
  timeSpent         Int               @default(0)
  engagementScore   Float             @default(0.0)
  retentionRate     Float             @default(0.0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  student           User              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject           Subject           @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([studentId, subjectId, period, startDate])
  @@index([studentId, period, startDate])
}

model NeuralPathway {
  id                  String                 @id @default(cuid())
  studentId           String
  pathwayType         PathwayType
  strength            Float                  @default(0.5)
  activationPattern   Json
  learningVelocity    Float                  @default(0.5)
  retentionRate       Float                  @default(0.5)
  emotionalResonance  Float                  @default(0.5)
  crossDomainTransfer Float                  @default(0.5)
  lastUpdated         DateTime               @default(now()) @updatedAt
  interventions       LearningIntervention[]
  student             User                   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, pathwayType])
  @@index([studentId, strength])
}

model LearningDimensions {
  id           String   @id @default(cuid())
  studentId    String   @unique
  cognitive    Json
  emotional    Json
  social       Json
  creative     Json
  lastAnalyzed DateTime @default(now()) @updatedAt
  student      User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
}

model LearningIntervention {
  id                     String                 @id @default(cuid())
  studentId              String
  pathwayId              String?
  interventionType       InterventionType
  trigger                String
  approach               String
  expectedOutcome        String
  confidence             Float                  @default(0.5)
  personalizedContent    String
  crossDomainConnections String[]
  emotionalSupport       String
  successMetrics         String[]
  isActive               Boolean                @default(true)
  appliedAt              DateTime?
  completedAt            DateTime?
  effectiveness          Float?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @default(now()) @updatedAt
  feedback               InterventionFeedback[]
  pathway                NeuralPathway?         @relation(fields: [pathwayId], references: [id])
  student                User                   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, interventionType])
  @@index([studentId, isActive])
}

model InterventionFeedback {
  id             String               @id @default(cuid())
  interventionId String
  feedbackType   String
  rating         Float
  comments       String?
  metrics        Json
  createdAt      DateTime             @default(now())
  intervention   LearningIntervention @relation(fields: [interventionId], references: [id], onDelete: Cascade)

  @@index([interventionId, feedbackType])
}

model CrossDomainConnection {
  id             String   @id @default(cuid())
  studentId      String
  sourceDomain   String
  targetDomain   String
  connectionType String
  strength       Float    @default(0.5)
  usageCount     Int      @default(0)
  effectiveness  Float    @default(0.5)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, sourceDomain, targetDomain, connectionType])
  @@index([studentId, strength])
}

model EmotionalState {
  id          String   @id @default(cuid())
  studentId   String
  sessionId   String?
  confidence  Float    @default(0.5)
  stress      Float    @default(0.3)
  engagement  Float    @default(0.7)
  motivation  Float    @default(0.6)
  curiosity   Float    @default(0.5)
  frustration Float    @default(0.2)
  joy         Float    @default(0.4)
  context     String?
  detectedAt  DateTime @default(now())
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, detectedAt])
  @@index([studentId, stress])
}

model PredictiveAnalytics {
  id                    String    @id @default(cuid())
  studentId             String
  predictionType        String
  confidence            Float     @default(0.5)
  predictedValue        Float
  actualValue           Float?
  accuracy              Float?
  factors               Json
  interventionSuggested Boolean   @default(false)
  predictedAt           DateTime  @default(now())
  measuredAt            DateTime?
  student               User      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, predictionType])
  @@index([studentId, predictedAt])
}

model LearningPattern {
  id                    String              @id @default(cuid())
  studentId             String
  patternType           LearningPatternType
  conceptualStrengths   String[]
  proceduralStrengths   String[]
  commonMistakes        String[]
  effectiveStrategies   Json
  optimalStudyTimes     String[]
  preferredContentTypes Json
  learningVelocity      Float               @default(0.5)
  retentionRate         Float               @default(0.5)
  engagementPattern     Json
  difficultyPreference  Float               @default(0.5)
  socialLearningStyle   Json
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @default(now()) @updatedAt
  student               User                @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, patternType])
  @@index([studentId, patternType])
}

model LearningCurve {
  id                  String    @id @default(cuid())
  studentId           String
  subjectId           String
  topicId             String?
  curveType           CurveType
  dataPoints          Json
  slope               Float
  plateauPoints       Json
  accelerationZones   Json
  difficultySpikes    Json
  masteryThreshold    Float     @default(0.8)
  predictedCompletion DateTime?
  confidence          Float     @default(0.5)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now()) @updatedAt
  student             User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject             Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@index([studentId, subjectId])
  @@index([studentId, curveType])
}

model KnowledgeRetention {
  id                  String   @id @default(cuid())
  studentId           String
  conceptId           String
  conceptName         String
  subjectId           String
  initialMastery      Float
  retentionLevel      Float
  lastReviewed        DateTime
  nextReview          DateTime
  reviewCount         Int      @default(0)
  forgettingCurve     Json
  reinforcementNeeded Boolean  @default(false)
  masteryThreshold    Float    @default(0.8)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
  student             User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject             Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([studentId, conceptId])
  @@index([studentId, nextReview])
  @@index([studentId, reinforcementNeeded])
}

model EngagementOptimization {
  id                  String   @id @default(cuid())
  studentId           String
  sessionId           String?
  engagementLevel     Float
  engagementFactors   Json
  optimizationActions Json
  effectiveness       Float?
  contentAdjustments  Json
  pacingAdjustments   Json
  interactionChanges  Json
  beforeEngagement    Float
  afterEngagement     Float?
  timestamp           DateTime @default(now())
  student             User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, timestamp])
  @@index([studentId, engagementLevel])
}

model GuardianInsight {
  id              String          @id @default(cuid())
  guardianId      String
  studentId       String
  insightType     InsightType
  title           String
  description     String
  recommendations Json
  priority        InsightPriority
  isRead          Boolean         @default(false)
  actionTaken     Boolean         @default(false)
  actionNotes     String?
  effectiveness   Float?
  generatedAt     DateTime        @default(now())
  expiresAt       DateTime?
  guardian        User            @relation("GuardianInsight", fields: [guardianId], references: [id], onDelete: Cascade)
  student         User            @relation("StudentInsight", fields: [studentId], references: [id], onDelete: Cascade)

  @@index([guardianId, isRead])
  @@index([studentId, insightType])
  @@index([generatedAt, priority])
}

model PerformanceKPI {
  id                 String            @id @default(cuid())
  studentId          String
  subjectId          String?
  kpiType            KPIType
  period             PerformancePeriod
  startDate          DateTime          @db.Date
  endDate            DateTime          @db.Date
  masteryRate        Float             @default(0.0)
  completionRate     Float             @default(0.0)
  assessmentScore    Float             @default(0.0)
  learningVelocity   Float             @default(0.0)
  engagementScore    Float             @default(0.0)
  timeOnTask         Int               @default(0)
  interactionRate    Float             @default(0.0)
  persistenceScore   Float             @default(0.0)
  retentionRate      Float             @default(0.0)
  transferRate       Float             @default(0.0)
  applicationRate    Float             @default(0.0)
  attendanceRate     Float             @default(0.0)
  punctualityRate    Float             @default(0.0)
  collaborationScore Float             @default(0.0)
  improvementRate    Float             @default(0.0)
  goalAchievement    Float             @default(0.0)
  selfEfficacy       Float             @default(0.0)
  peerComparison     Json
  historicalTrend    Json
  benchmarkScore     Float?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
  student            User              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject            Subject?          @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([studentId, subjectId, kpiType, period, startDate])
  @@index([studentId, kpiType, period])
  @@index([studentId, startDate, endDate])
}

model AnalyticsDashboard {
  id              String        @id @default(cuid())
  userId          String
  dashboardType   DashboardType
  name            String
  description     String?
  configuration   Json
  isDefault       Boolean       @default(false)
  isPublic        Boolean       @default(false)
  refreshInterval Int           @default(300)
  lastRefreshed   DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dashboardType])
  @@index([userId, isDefault])
}

model ABTestExperiment {
  id                String              @id @default(cuid())
  name              String              @unique
  description       String
  hypothesis        String
  testType          ABTestType
  status            ABTestStatus        @default(draft)
  startDate         DateTime?
  endDate           DateTime?
  targetAudience    Json
  successMetrics    String[]
  minimumSampleSize Int                 @default(100)
  confidenceLevel   Float               @default(0.95)
  isActive          Boolean             @default(false)
  createdBy         String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  createdByUser     User                @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  participants      ABTestParticipant[]
  results           ABTestResult[]
  variants          ABTestVariant[]

  @@index([status, isActive])
  @@index([testType])
  @@index([startDate, endDate])
}

model ABTestVariant {
  id                String              @id @default(cuid())
  experimentId      String
  name              String
  description       String
  variantType       VariantType         @default(control)
  configuration     Json
  trafficAllocation Float               @default(0.5)
  isControl         Boolean             @default(false)
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  participants      ABTestParticipant[]
  results           ABTestResult[]
  experiment        ABTestExperiment    @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  @@index([experimentId, isControl])
  @@index([variantType])
}

model ABTestParticipant {
  id            String              @id @default(cuid())
  experimentId  String
  variantId     String
  userId        String
  enrolledAt    DateTime            @default(now())
  completedAt   DateTime?
  isActive      Boolean             @default(true)
  dropoutReason String?
  metadata      Json?
  interactions  ABTestInteraction[]
  experiment    ABTestExperiment    @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant       ABTestVariant       @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([experimentId, userId])
  @@index([experimentId, variantId])
  @@index([userId, isActive])
}

model ABTestInteraction {
  id              String            @id @default(cuid())
  participantId   String
  interactionType InteractionType
  action          String
  context         Json?
  timestamp       DateTime          @default(now())
  duration        Int?
  outcome         String?
  metadata        Json?
  participant     ABTestParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([participantId, interactionType])
  @@index([timestamp])
}

model ABTestResult {
  id                      String           @id @default(cuid())
  experimentId            String
  variantId               String
  metricName              String
  metricValue             Float
  sampleSize              Int
  confidenceInterval      Json
  statisticalSignificance Float?
  pValue                  Float?
  effectSize              Float?
  calculatedAt            DateTime         @default(now())
  experiment              ABTestExperiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  variant                 ABTestVariant    @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([experimentId, metricName])
  @@index([variantId, metricName])
}

model UserFeedback {
  id             String           @id @default(cuid())
  userId         String
  feedbackType   FeedbackType
  category       String
  rating         Int?
  title          String
  description    String
  context        Json?
  isAnonymous    Boolean          @default(false)
  isPublic       Boolean          @default(false)
  status         FeedbackStatus   @default(pending)
  priority       FeedbackPriority @default(medium)
  assignedTo     String?
  response       String?
  respondedAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  tags           FeedbackTag[]
  assignedToUser User?            @relation("FeedbackAssignee", fields: [assignedTo], references: [id])
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, feedbackType])
  @@index([status, priority])
  @@index([category])
}

model FeedbackTag {
  id         String       @id @default(cuid())
  feedbackId String
  tag        String
  createdAt  DateTime     @default(now())
  feedback   UserFeedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  @@unique([feedbackId, tag])
  @@index([tag])
}

model SystemPerformance {
  id          String              @id @default(cuid())
  metricName  String
  metricValue Float
  unit        String
  timestamp   DateTime            @default(now())
  context     Json?
  severity    PerformanceSeverity @default(info)

  @@index([metricName, timestamp])
  @@index([severity, timestamp])
}

model AccessibilityAudit {
  id              String                 @id @default(cuid())
  pageUrl         String
  auditType       AccessibilityAuditType
  wcagLevel       WCAGLevel
  totalIssues     Int                    @default(0)
  criticalIssues  Int                    @default(0)
  seriousIssues   Int                    @default(0)
  moderateIssues  Int                    @default(0)
  minorIssues     Int                    @default(0)
  score           Float                  @default(0.0)
  recommendations Json
  auditData       Json
  auditedAt       DateTime               @default(now())
  auditedBy       String?
  auditedByUser   User?                  @relation(fields: [auditedBy], references: [id])
  issues          AccessibilityIssue[]

  @@index([pageUrl, auditType])
  @@index([wcagLevel, score])
}

model AccessibilityIssue {
  id              String                @id @default(cuid())
  auditId         String
  issueType       String
  severity        AccessibilitySeverity
  description     String
  wcagCriteria    String
  elementSelector String?
  recommendation  String
  isFixed         Boolean               @default(false)
  fixedAt         DateTime?
  fixedBy         String?
  audit           AccessibilityAudit    @relation(fields: [auditId], references: [id], onDelete: Cascade)
  fixedByUser     User?                 @relation(fields: [fixedBy], references: [id])

  @@index([auditId, severity])
  @@index([isFixed])
}

model InclusivityAudit {
  id              String                 @id @default(cuid())
  organizationId  String
  auditType       InclusivityAuditType
  targetAudience  String[]
  auditDate       DateTime               @default(now())
  auditorId       String
  status          InclusivityAuditStatus @default(pending)
  overallScore    Float?
  recommendations String
  actionPlan      String
  followUpDate    DateTime?
  completedAt     DateTime?
  auditor         User                   @relation(fields: [auditorId], references: [id])
  organization    Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  findings        InclusivityFinding[]

  @@index([organizationId, auditType])
  @@index([auditDate])
  @@index([status])
}

model InclusivityFinding {
  id                String              @id @default(cuid())
  auditId           String
  category          InclusivityCategory
  severity          InclusivitySeverity
  title             String
  description       String
  currentState      String
  recommendedAction String
  priority          InclusivityPriority
  estimatedEffort   String?
  isImplemented     Boolean             @default(false)
  implementedAt     DateTime?
  implementedBy     String?
  audit             InclusivityAudit    @relation(fields: [auditId], references: [id], onDelete: Cascade)
  implementedByUser User?               @relation(fields: [implementedBy], references: [id])

  @@index([auditId, category])
  @@index([severity])
  @@index([isImplemented])
}

model UserAccessibilityProfile {
  id                      String       @id @default(cuid())
  userId                  String       @unique
  organizationId          String
  hasADHD                 Boolean      @default(false)
  hasDyslexia             Boolean      @default(false)
  hasAutism               Boolean      @default(false)
  hasHearingImpairment    Boolean      @default(false)
  hasVisualImpairment     Boolean      @default(false)
  hasMobilityImpairment   Boolean      @default(false)
  isESL                   Boolean      @default(false)
  preferredPacing         PacingType   @default(standard)
  breakFrequency          Int          @default(15)
  maxSessionLength        Int          @default(45)
  preferredFontSize       FontSize     @default(medium)
  preferredColorScheme    ColorScheme  @default(standard)
  highContrast            Boolean      @default(false)
  reducedMotion           Boolean      @default(false)
  simplifiedLanguage      Boolean      @default(false)
  extraExplanations       Boolean      @default(false)
  visualAids              Boolean      @default(true)
  audioSupport            Boolean      @default(true)
  primaryLanguage         String       @default("en")
  culturalContext         String?
  religiousConsiderations String?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  organization            Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                    User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([hasADHD, hasDyslexia, hasAutism])
}

model AccessibilityCompliance {
  id              String                        @id @default(cuid())
  organizationId  String
  auditDate       DateTime                      @default(now())
  complianceLevel ComplianceLevel
  wcagVersion     String                        @default("2.1")
  wcagLevel       WCAGLevel
  overallScore    Float
  status          ComplianceStatus
  auditorId       String
  auditScope      String
  remediationPlan String?
  nextAuditDate   DateTime?
  createdAt       DateTime                      @default(now())
  updatedAt       DateTime                      @updatedAt
  auditor         User                          @relation(fields: [auditorId], references: [id], onDelete: Cascade)
  organization    Organization                  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  findings        AccessibilityFinding[]
  recommendations AccessibilityRecommendation[]

  @@map("accessibility_compliance")
}

model AccessibilityFinding {
  id           String                  @id @default(cuid())
  complianceId String
  findingType  FindingType
  severity     FindingSeverity
  wcagCriteria String
  description  String
  location     String
  impact       String
  remediation  String?
  status       FindingStatus
  assignedTo   String?
  dueDate      DateTime?
  verifiedDate DateTime?
  notes        String?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  assignedUser User?                   @relation(fields: [assignedTo], references: [id])
  compliance   AccessibilityCompliance @relation(fields: [complianceId], references: [id], onDelete: Cascade)

  @@map("accessibility_findings")
}

model AccessibilityRecommendation {
  id                 String                  @id @default(cuid())
  complianceId       String
  recommendationType RecommendationType
  priority           RecommendationPriority
  title              String
  description        String
  implementation     String
  estimatedEffort    String?
  benefits           String
  status             RecommendationStatus
  assignedTo         String?
  dueDate            DateTime?
  completedDate      DateTime?
  notes              String?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  assignedUser       User?                   @relation(fields: [assignedTo], references: [id])
  compliance         AccessibilityCompliance @relation(fields: [complianceId], references: [id], onDelete: Cascade)

  @@map("accessibility_recommendations")
}

model AccessibilityTest {
  id              String       @id @default(cuid())
  organizationId  String
  testType        TestType
  testName        String
  description     String
  testUrl         String
  testResults     Json
  passed          Boolean
  score           Float
  issues          Json?
  recommendations Json?
  testedBy        String
  testDate        DateTime     @default(now())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tester          User         @relation(fields: [testedBy], references: [id], onDelete: Cascade)

  @@map("accessibility_tests")
}

model AccessibilityTraining {
  id                 String                            @id @default(cuid())
  organizationId     String
  trainingType       TrainingType
  title              String
  description        String
  content            String
  duration           Int
  difficulty         TrainingDifficulty
  prerequisites      String?
  learningObjectives String[]
  resources          String[]
  assessment         String?
  completionCriteria String
  isActive           Boolean                           @default(true)
  createdAt          DateTime                          @default(now())
  updatedAt          DateTime                          @updatedAt
  organization       Organization                      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  completions        AccessibilityTrainingCompletion[]

  @@map("accessibility_training")
}

model AccessibilityTrainingCompletion {
  id             String                @id @default(cuid())
  trainingId     String
  userId         String
  completedAt    DateTime              @default(now())
  score          Float?
  feedback       String?
  certificateUrl String?
  training       AccessibilityTraining @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([trainingId, userId])
  @@map("accessibility_training_completions")
}

model ScalabilityTest {
  id                    String                @id @default(cuid())
  organizationId        String
  testName              String
  testType              ScalabilityTestType
  description           String
  targetConcurrentUsers Int
  testDuration          Int
  testConfiguration     Json
  status                ScalabilityTestStatus
  startedAt             DateTime?
  completedAt           DateTime?
  results               Json?
  performanceMetrics    Json?
  bottlenecks           Json?
  recommendations       Json?
  createdBy             String
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  loadTests             LoadTest[]
  creator               User                  @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organization          Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("scalability_tests")
}

model LoadTest {
  id                  String          @id @default(cuid())
  scalabilityTestId   String
  testPhase           String
  concurrentUsers     Int
  requestsPerSecond   Float
  responseTime        Float
  errorRate           Float
  throughput          Float
  cpuUsage            Float
  memoryUsage         Float
  databaseConnections Int
  cacheHitRate        Float
  networkLatency      Float
  timestamp           DateTime        @default(now())
  metadata            Json?
  scalabilityTest     ScalabilityTest @relation(fields: [scalabilityTestId], references: [id], onDelete: Cascade)

  @@map("load_tests")
}

model PerformanceBenchmark {
  id               String          @id @default(cuid())
  organizationId   String
  benchmarkName    String
  benchmarkType    BenchmarkType
  description      String
  targetMetrics    Json
  actualMetrics    Json
  performanceScore Float
  status           BenchmarkStatus
  baselineDate     DateTime
  comparisonDate   DateTime?
  improvements     Json?
  regressions      Json?
  recommendations  Json?
  createdBy        String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  creator          User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organization     Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("performance_benchmarks")
}

model SystemResource {
  id                    String         @id @default(cuid())
  organizationId        String
  resourceType          ResourceType
  resourceName          String
  currentUsage          Float
  maxCapacity           Float
  utilizationPercentage Float
  status                ResourceStatus
  alerts                Json?
  metrics               Json
  timestamp             DateTime       @default(now())
  createdAt             DateTime       @default(now())
  organization          Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("system_resources")
}

model CachePerformance {
  id                  String       @id @default(cuid())
  organizationId      String
  cacheType           CacheType
  cacheKey            String
  hitRate             Float
  missRate            Float
  evictionRate        Float
  averageResponseTime Float
  cacheSize           Int
  maxCacheSize        Int
  memoryUsage         Float
  timestamp           DateTime     @default(now())
  createdAt           DateTime     @default(now())
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("cache_performance")
}

model DatabasePerformance {
  id                  String       @id @default(cuid())
  organizationId      String
  databaseName        String
  queryType           QueryType
  averageResponseTime Float
  slowQueries         Int
  totalQueries        Int
  connectionPoolUsage Float
  deadlocks           Int
  lockWaits           Int
  indexUsage          Float
  tableScans          Int
  timestamp           DateTime     @default(now())
  createdAt           DateTime     @default(now())
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("database_performance")
}

model OptimizationRecommendation {
  id                  String               @id @default(cuid())
  organizationId      String
  recommendationType  OptimizationType
  priority            OptimizationPriority
  title               String
  description         String
  currentPerformance  Json
  expectedImprovement Json
  implementation      String
  estimatedEffort     String
  impact              String
  status              OptimizationStatus
  assignedTo          String?
  dueDate             DateTime?
  completedDate       DateTime?
  results             Json?
  notes               String?
  createdBy           String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  assignedUser        User?                @relation("OptimizationAssignee", fields: [assignedTo], references: [id])
  creator             User                 @relation("OptimizationCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  organization        Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("optimization_recommendations")
}

model LMSIntegration {
  id             String            @id @default(cuid())
  organizationId String
  lmsType        LMSType
  lmsName        String
  baseUrl        String
  apiKey         String?
  clientId       String?
  clientSecret   String?
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?
  configuration  Json
  status         IntegrationStatus
  lastSyncAt     DateTime?
  syncFrequency  Int
  autoSync       Boolean           @default(false)
  errorCount     Int               @default(0)
  lastError      String?
  lastErrorAt    DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  assignments    LMSAssignment[]
  courses        LMSCourse[]
  enrollments    LMSEnrollment[]
  grades         LMSGrade[]
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  syncLogs       LMSSyncLog[]

  @@map("lms_integrations")
}

model LMSCourse {
  id               String          @id @default(cuid())
  lmsIntegrationId String
  lmsCourseId      String
  courseName       String
  courseCode       String?
  description      String?
  startDate        DateTime?
  endDate          DateTime?
  status           String?
  enrollmentCount  Int             @default(0)
  lmsData          Json?
  lastSyncAt       DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  assignments      LMSAssignment[]
  lmsIntegration   LMSIntegration  @relation(fields: [lmsIntegrationId], references: [id], onDelete: Cascade)
  enrollments      LMSEnrollment[]

  @@unique([lmsIntegrationId, lmsCourseId])
  @@map("lms_courses")
}

model LMSEnrollment {
  id               String           @id @default(cuid())
  lmsIntegrationId String
  lmsCourseId      String
  userId           String
  lmsUserId        String?
  enrollmentDate   DateTime?
  status           EnrollmentStatus
  role             String?
  lmsData          Json?
  lastSyncAt       DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  course           LMSCourse        @relation(fields: [lmsCourseId], references: [id], onDelete: Cascade)
  lmsIntegration   LMSIntegration   @relation(fields: [lmsIntegrationId], references: [id], onDelete: Cascade)
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  grades           LMSGrade[]

  @@unique([lmsIntegrationId, lmsCourseId, userId])
  @@map("lms_enrollments")
}

model LMSAssignment {
  id               String         @id @default(cuid())
  lmsIntegrationId String
  lmsCourseId      String
  lmsAssignmentId  String
  assignmentName   String
  description      String?
  dueDate          DateTime?
  points           Float?
  assignmentType   String?
  status           String?
  lmsData          Json?
  lastSyncAt       DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  course           LMSCourse      @relation(fields: [lmsCourseId], references: [id], onDelete: Cascade)
  lmsIntegration   LMSIntegration @relation(fields: [lmsIntegrationId], references: [id], onDelete: Cascade)
  grades           LMSGrade[]

  @@unique([lmsIntegrationId, lmsCourseId, lmsAssignmentId])
  @@map("lms_assignments")
}

model LMSGrade {
  id               String         @id @default(cuid())
  lmsIntegrationId String
  lmsEnrollmentId  String
  lmsAssignmentId  String
  userId           String
  grade            Float?
  maxPoints        Float?
  percentage       Float?
  letterGrade      String?
  feedback         String?
  submittedAt      DateTime?
  gradedAt         DateTime?
  lmsData          Json?
  lastSyncAt       DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  assignment       LMSAssignment  @relation(fields: [lmsAssignmentId], references: [id], onDelete: Cascade)
  enrollment       LMSEnrollment  @relation(fields: [lmsEnrollmentId], references: [id], onDelete: Cascade)
  lmsIntegration   LMSIntegration @relation(fields: [lmsIntegrationId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([lmsIntegrationId, lmsEnrollmentId, lmsAssignmentId])
  @@map("lms_grades")
}

model LMSSyncLog {
  id               String         @id @default(cuid())
  lmsIntegrationId String
  syncType         SyncType
  status           SyncStatus
  recordsProcessed Int            @default(0)
  recordsCreated   Int            @default(0)
  recordsUpdated   Int            @default(0)
  recordsFailed    Int            @default(0)
  errorMessage     String?
  startedAt        DateTime       @default(now())
  completedAt      DateTime?
  duration         Int?
  metadata         Json?
  lmsIntegration   LMSIntegration @relation(fields: [lmsIntegrationId], references: [id], onDelete: Cascade)

  @@map("lms_sync_logs")
}

model SSOIntegration {
  id             String            @id @default(cuid())
  organizationId String
  ssoType        SSOType
  ssoName        String
  entityId       String?
  ssoUrl         String?
  certificate    String?
  clientId       String?
  clientSecret   String?
  redirectUri    String?
  scopes         String[]
  configuration  Json
  status         IntegrationStatus
  lastSyncAt     DateTime?
  autoProvision  Boolean           @default(false)
  errorCount     Int               @default(0)
  lastError      String?
  lastErrorAt    DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  ssoUsers       SSOUser[]

  @@map("sso_integrations")
}

model SSOUser {
  id               String         @id @default(cuid())
  ssoIntegrationId String
  userId           String
  ssoUserId        String
  ssoUsername      String?
  ssoEmail         String?
  ssoData          Json?
  lastLoginAt      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  ssoIntegration   SSOIntegration @relation(fields: [ssoIntegrationId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([ssoIntegrationId, ssoUserId])
  @@map("sso_users")
}

model SISIntegration {
  id             String            @id @default(cuid())
  organizationId String
  sisType        SISType
  sisName        String
  baseUrl        String
  apiKey         String?
  username       String?
  password       String?
  configuration  Json
  status         IntegrationStatus
  lastSyncAt     DateTime?
  syncFrequency  Int
  autoSync       Boolean           @default(false)
  errorCount     Int               @default(0)
  lastError      String?
  lastErrorAt    DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  classes        SISClass[]
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  students       SISStudent[]
  syncLogs       SISSyncLog[]
  teachers       SISTeacher[]

  @@map("sis_integrations")
}

model SISStudent {
  id               String         @id @default(cuid())
  sisIntegrationId String
  userId           String?
  sisStudentId     String
  studentNumber    String?
  firstName        String
  lastName         String
  email            String?
  grade            String?
  schoolYear       String?
  enrollmentStatus String?
  sisData          Json?
  lastSyncAt       DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  sisIntegration   SISIntegration @relation(fields: [sisIntegrationId], references: [id], onDelete: Cascade)
  user             User?          @relation(fields: [userId], references: [id])
  classes          SISClass[]     @relation("SISClassToSISStudent")

  @@unique([sisIntegrationId, sisStudentId])
  @@map("sis_students")
}

model SISTeacher {
  id               String         @id @default(cuid())
  sisIntegrationId String
  userId           String?
  sisTeacherId     String
  employeeNumber   String?
  firstName        String
  lastName         String
  email            String?
  department       String?
  sisData          Json?
  lastSyncAt       DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  classes          SISClass[]
  sisIntegration   SISIntegration @relation(fields: [sisIntegrationId], references: [id], onDelete: Cascade)
  user             User?          @relation(fields: [userId], references: [id])

  @@unique([sisIntegrationId, sisTeacherId])
  @@map("sis_teachers")
}

model SISClass {
  id               String         @id @default(cuid())
  sisIntegrationId String
  sisClassId       String
  className        String
  classCode        String?
  subject          String?
  grade            String?
  period           String?
  room             String?
  teacherId        String?
  enrollmentCount  Int            @default(0)
  sisData          Json?
  lastSyncAt       DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  sisIntegration   SISIntegration @relation(fields: [sisIntegrationId], references: [id], onDelete: Cascade)
  teacher          SISTeacher?    @relation(fields: [teacherId], references: [id])
  students         SISStudent[]   @relation("SISClassToSISStudent")

  @@unique([sisIntegrationId, sisClassId])
  @@map("sis_classes")
}

model SISSyncLog {
  id               String         @id @default(cuid())
  sisIntegrationId String
  syncType         SyncType
  status           SyncStatus
  recordsProcessed Int            @default(0)
  recordsCreated   Int            @default(0)
  recordsUpdated   Int            @default(0)
  recordsFailed    Int            @default(0)
  errorMessage     String?
  startedAt        DateTime       @default(now())
  completedAt      DateTime?
  duration         Int?
  metadata         Json?
  sisIntegration   SISIntegration @relation(fields: [sisIntegrationId], references: [id], onDelete: Cascade)

  @@map("sis_sync_logs")
}

model MonitoringDashboard {
  id              String                  @id @default(cuid())
  organizationId  String
  dashboardName   String
  dashboardType   MonitoringDashboardType
  description     String?
  configuration   Json
  isDefault       Boolean                 @default(false)
  isPublic        Boolean                 @default(false)
  refreshInterval Int                     @default(30)
  autoRefresh     Boolean                 @default(true)
  createdBy       String
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  creator         User                    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organization    Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  widgets         MonitoringWidget[]

  @@map("monitoring_dashboards")
}

model MonitoringWidget {
  id              String              @id @default(cuid())
  dashboardId     String
  widgetName      String
  widgetType      WidgetType
  position        Json
  configuration   Json
  refreshInterval Int                 @default(30)
  isVisible       Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  dashboard       MonitoringDashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@map("monitoring_widgets")
}

model SystemMetric {
  id             String       @id @default(cuid())
  organizationId String
  metricName     String
  metricType     MetricType
  value          Float
  unit           String?
  tags           Json?
  timestamp      DateTime     @default(now())
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("system_metrics")
}

model PerformanceMetric {
  id             String       @id @default(cuid())
  organizationId String
  endpoint       String
  method         String
  responseTime   Float
  statusCode     Int
  requestSize    Int?
  responseSize   Int?
  userAgent      String?
  ipAddress      String?
  userId         String?
  sessionId      String?
  timestamp      DateTime     @default(now())
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id])

  @@map("performance_metrics")
}

model UsageAnalytic {
  id             String       @id @default(cuid())
  organizationId String
  userId         String?
  sessionId      String?
  eventType      EventType
  eventName      String
  eventData      Json?
  pageUrl        String?
  referrer       String?
  userAgent      String?
  ipAddress      String?
  timestamp      DateTime     @default(now())
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id])

  @@map("usage_analytics")
}

model HealthCheck {
  id             String          @id @default(cuid())
  organizationId String
  checkName      String
  checkType      HealthCheckType
  status         HealthStatus
  responseTime   Float?
  errorMessage   String?
  metadata       Json?
  lastCheckedAt  DateTime        @default(now())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("health_checks")
}

model Alert {
  id               String        @id @default(cuid())
  organizationId   String
  alertName        String
  alertType        AlertType
  severity         AlertSeverity
  status           AlertStatus
  message          String
  description      String?
  source           String?
  metadata         Json?
  acknowledgedBy   String?
  acknowledgedAt   DateTime?
  resolvedBy       String?
  resolvedAt       DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  acknowledgedUser User?         @relation("AlertAcknowledgedBy", fields: [acknowledgedBy], references: [id])
  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  resolvedUser     User?         @relation("AlertResolvedBy", fields: [resolvedBy], references: [id])

  @@map("alerts")
}

model MonitoringRule {
  id                   String             @id @default(cuid())
  organizationId       String
  ruleName             String
  ruleType             RuleType
  condition            Json
  threshold            Float?
  operator             ComparisonOperator
  isEnabled            Boolean            @default(true)
  alertSeverity        AlertSeverity
  notificationChannels String[]
  cooldownPeriod       Int                @default(300)
  lastTriggeredAt      DateTime?
  triggerCount         Int                @default(0)
  createdBy            String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  creator              User               @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("monitoring_rules")
}

model NotificationChannel {
  id             String                  @id @default(cuid())
  organizationId String
  channelName    String
  channelType    NotificationChannelType
  configuration  Json
  isEnabled      Boolean                 @default(true)
  isDefault      Boolean                 @default(false)
  createdBy      String
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  creator        User                    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organization   Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("notification_channels")
}

model MonitoringReport {
  id             String       @id @default(cuid())
  organizationId String
  reportName     String
  reportType     ReportType
  period         String
  startDate      DateTime
  endDate        DateTime
  data           Json
  status         ReportStatus
  generatedBy    String
  generatedAt    DateTime     @default(now())
  createdAt      DateTime     @default(now())
  generator      User         @relation(fields: [generatedBy], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("monitoring_reports")
}

model SmartTeachingSession {
  id           String                     @id @default(cuid())
  studentId    String
  lessonId     String
  startedAt    DateTime                   @default(now())
  completedAt  DateTime?
  status       SmartTeachingSessionStatus @default(active)
  progress     Json?
  metadata     Json?
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  assessments  SmartTeachingAssessment[]
  interactions SmartTeachingInteraction[]
  lesson       Lesson                     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student      User                       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, lessonId])
  @@index([studentId, status])
  @@index([lessonId, status])
}

model SmartTeachingInteraction {
  id        String                       @id @default(cuid())
  sessionId String
  type      SmartTeachingInteractionType
  content   Json
  timestamp DateTime                     @default(now())
  metadata  Json?
  session   SmartTeachingSession         @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, timestamp])
  @@index([type, timestamp])
}

model SmartTeachingAssessment {
  id           String               @id @default(cuid())
  sessionId    String
  assessmentId String
  startedAt    DateTime             @default(now())
  completedAt  DateTime?
  score        Float?
  status       AssessmentStatus     @default(not_started)
  responses    Json?
  feedback     Json?
  assessment   Assessment           @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  session      SmartTeachingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, assessmentId])
  @@index([sessionId, status])
}

model GeneratedContent {
  id          String      @id @default(cuid())
  lessonId    String
  contentType ContentType
  content     Json
  metadata    Json?
  quality     Float?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([lessonId, contentType])
  @@index([contentType, quality])
}

enum Role {
  student
  teacher
  guardian
  admin
  super_admin
}

enum OrganizationTier {
  free
  basic
  premium
  enterprise
}

enum GuardianRelationshipStatus {
  pending
  approved
  rejected
  revoked
}

enum EmailFrequency {
  daily
  weekly
  monthly
  never
}

enum EmailStatus {
  sent
  delivered
  failed
  bounced
}

enum ReportFrequency {
  daily
  weekly
  monthly
}

enum ReportFormat {
  pdf
  csv
  html
}

enum AttendanceStatus {
  present
  absent
  late
  excused
  sick
}

enum PerformancePeriod {
  daily
  weekly
  monthly
  semester
  yearly
}

enum ContentModality {
  text
  visual
  audio
  interactive
  multimodal
}

enum ContentLength {
  short
  medium
  long
}

enum SessionStatus {
  active
  completed
  paused
}

enum MessageType {
  text
  system
  notification
}

enum SubjectLevel {
  elementary
  middle
  high
  college
  university
}

enum DifficultyLevel {
  beginner
  intermediate
  advanced
  expert
}

enum AssessmentType {
  quiz
  test
  assignment
  project
  homework
}

enum QuestionType {
  multiple_choice
  short_answer
  essay
  coding
  true_false
  fill_in_blank
}

enum FailureType {
  concept_gap
  prerequisite_missing
  learning_style_mismatch
  attention_deficit
  motivation_issue
}

enum PaceLevel {
  slow
  moderate
  fast
  adaptive
}

enum ProgressStatus {
  not_started
  in_progress
  completed
  failed
  retry_needed
}

enum AdaptiveSessionType {
  DIAGNOSTIC
  FORMATIVE
  SUMMATIVE
  REMEDIATION
  ENRICHMENT
}

enum AdaptiveQuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  SHORT_ANSWER
  ESSAY
  MATHEMATICAL
  CODE_EXECUTION
  SIMULATION
  AUDIO_RESPONSE
  VISUAL_ANALYSIS
  INTERACTIVE_DEMO
}

enum CognitiveLevel {
  REMEMBER
  UNDERSTAND
  APPLY
  ANALYZE
  EVALUATE
  CREATE
}

enum AnalyticsMetricType {
  LEARNING_VELOCITY
  RETENTION_RATE
  ENGAGEMENT_SCORE
  CONFIDENCE_LEVEL
  DIFFICULTY_ADJUSTMENT
  MASTERY_PROGRESSION
  TIME_EFFICIENCY
  ERROR_PATTERN_ANALYSIS
}

enum PredictionType {
  ASSESSMENT_SCORE
  LEARNING_OUTCOME
  ENGAGEMENT_LEVEL
  COMPLETION_PROBABILITY
  DIFFICULTY_LEVEL
  TIME_TO_MASTERY
}

enum GapType {
  CONCEPTUAL_UNDERSTANDING
  PROCEDURAL_KNOWLEDGE
  PROBLEM_SOLVING
  CRITICAL_THINKING
  APPLICATION_SKILLS
  RETENTION_ISSUES
  ENGAGEMENT_DROP
  TIME_MANAGEMENT
}

enum GapSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PathwayType {
  sequential
  parallel
  hierarchical
  network
  hybrid
}

enum InterventionType {
  predictive
  remedial
  accelerative
  creative
  emotional
}

enum LearningPatternType {
  COGNITIVE_PROCESSING
  LEARNING_STYLE
  ENGAGEMENT_PATTERN
  RETENTION_PATTERN
  DIFFICULTY_PREFERENCE
  SOCIAL_LEARNING
  TEMPORAL_PATTERN
  CONTENT_PREFERENCE
}

enum CurveType {
  MASTERY_CURVE
  ENGAGEMENT_CURVE
  DIFFICULTY_CURVE
  RETENTION_CURVE
  VELOCITY_CURVE
  COMPREHENSION_CURVE
}

enum InsightType {
  ACADEMIC_PROGRESS
  LEARNING_STYLE
  ENGAGEMENT_LEVEL
  STRUGGLING_AREAS
  STRENGTH_AREAS
  STUDY_HABITS
  MOTIVATION_LEVEL
  SOCIAL_LEARNING
  ATTENTION_SPAN
  DIFFICULTY_PREFERENCE
  RECOMMENDED_INTERVENTIONS
  CELEBRATION_MOMENTS
}

enum InsightPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum KPIType {
  ACADEMIC_PERFORMANCE
  ENGAGEMENT_METRICS
  RETENTION_ANALYSIS
  BEHAVIORAL_INSIGHTS
  GROWTH_TRACKING
  COMPARATIVE_ANALYSIS
  GOAL_ACHIEVEMENT
  SKILL_DEVELOPMENT
}

enum DashboardType {
  STUDENT_PROGRESS
  TEACHER_ANALYTICS
  ADMIN_OVERVIEW
  GUARDIAN_INSIGHTS
  CUSTOM_ANALYTICS
  PERFORMANCE_TRACKING
  ENGAGEMENT_MONITORING
  RETENTION_ANALYSIS
}

enum ABTestType {
  TEACHING_METHOD
  CONTENT_PRESENTATION
  ASSESSMENT_FORMAT
  UI_UX_DESIGN
  PERSONALIZATION_ALGORITHM
  ENGAGEMENT_STRATEGY
  DIFFICULTY_ADJUSTMENT
  FEEDBACK_MECHANISM
}

enum ABTestStatus {
  draft
  active
  paused
  completed
  cancelled
}

enum VariantType {
  control
  treatment
  alternative
}

enum InteractionType {
  lesson_start
  lesson_complete
  assessment_start
  assessment_complete
  content_interaction
  navigation_action
  feedback_provided
  help_requested
  session_end
}

enum FeedbackType {
  bug_report
  feature_request
  improvement_suggestion
  general_feedback
  usability_issue
  accessibility_concern
  performance_issue
  content_feedback
}

enum FeedbackStatus {
  pending
  in_review
  in_progress
  resolved
  closed
  duplicate
}

enum FeedbackPriority {
  low
  medium
  high
  critical
}

enum PerformanceSeverity {
  info
  warning
  error
  critical
}

enum AccessibilityAuditType {
  automated
  manual
  user_testing
  expert_review
}

enum WCAGLevel {
  A
  AA
  AAA
}

enum AccessibilitySeverity {
  minor
  moderate
  serious
  critical
}

enum InclusivityAuditType {
  adhd_accommodations
  learning_disabilities
  cultural_sensitivity
  language_barriers
  cognitive_accessibility
  comprehensive
}

enum InclusivityAuditStatus {
  pending
  in_progress
  completed
  needs_followup
  archived
}

enum InclusivityCategory {
  pacing_timing
  visual_design
  content_complexity
  interaction_patterns
  feedback_mechanisms
  navigation_structure
  language_clarity
  cultural_representation
  assistive_technology
  cognitive_load
}

enum InclusivitySeverity {
  low
  medium
  high
  critical
}

enum InclusivityPriority {
  low
  medium
  high
  urgent
}

enum PacingType {
  very_slow
  slow
  standard
  fast
  very_fast
}

enum FontSize {
  small
  medium
  large
  extra_large
}

enum ColorScheme {
  standard
  high_contrast
  dark_mode
  light_mode
  colorblind_friendly
}

enum ComplianceLevel {
  A
  AA
  AAA
}

enum ComplianceStatus {
  pending
  in_progress
  compliant
  non_compliant
  needs_review
}

enum FindingType {
  keyboard_navigation
  screen_reader
  color_contrast
  text_scaling
  focus_management
  aria_labels
  semantic_html
  multimedia_accessibility
  form_accessibility
  error_handling
}

enum FindingSeverity {
  critical
  high
  medium
  low
  minor
}

enum FindingStatus {
  open
  in_progress
  resolved
  verified
  closed
}

enum RecommendationType {
  technical_implementation
  design_improvement
  content_enhancement
  training_requirement
  policy_update
  tool_implementation
}

enum RecommendationPriority {
  critical
  high
  medium
  low
}

enum RecommendationStatus {
  pending
  in_progress
  completed
  cancelled
}

enum TestType {
  automated
  manual
  user_testing
  screen_reader_testing
  keyboard_testing
  color_contrast_testing
}

enum TrainingType {
  general_accessibility
  wcag_guidelines
  screen_reader_usage
  keyboard_navigation
  color_contrast
  aria_implementation
  testing_methodologies
}

enum TrainingDifficulty {
  beginner
  intermediate
  advanced
  expert
}

enum ScalabilityTestType {
  load_testing
  stress_testing
  spike_testing
  volume_testing
  endurance_testing
  capacity_testing
}

enum ScalabilityTestStatus {
  pending
  running
  completed
  failed
  cancelled
}

enum BenchmarkType {
  response_time
  throughput
  resource_utilization
  database_performance
  cache_performance
  api_performance
  user_experience
}

enum BenchmarkStatus {
  pending
  running
  completed
  failed
  baseline
  comparison
}

enum ResourceType {
  cpu
  memory
  disk
  network
  database
  cache
  api_endpoint
  queue
}

enum ResourceStatus {
  healthy
  warning
  critical
  overloaded
  offline
}

enum CacheType {
  redis
  memory
  cdn
  browser
  application
  database
}

enum QueryType {
  select
  insert
  update
  delete
  join
  aggregate
  index_scan
  table_scan
}

enum OptimizationType {
  database_optimization
  cache_optimization
  api_optimization
  resource_scaling
  code_optimization
  infrastructure_optimization
  query_optimization
  indexing_optimization
}

enum OptimizationPriority {
  critical
  high
  medium
  low
}

enum OptimizationStatus {
  pending
  in_progress
  completed
  cancelled
  failed
}

enum LMSType {
  canvas
  blackboard
  google_classroom
  moodle
  schoology
  brightspace
  sakai
  custom
}

enum SSOType {
  saml
  oauth2
  openid_connect
  ldap
  active_directory
  google_workspace
  microsoft_azure
  custom
}

enum SISType {
  powerschool
  infinite_campus
  skyward
  gradelink
  renweb
  schooltool
  custom
}

enum IntegrationStatus {
  active
  inactive
  error
  pending
  configuring
}

enum EnrollmentStatus {
  active
  inactive
  dropped
  completed
  pending
}

enum SyncType {
  full
  incremental
  manual
  scheduled
}

enum SyncStatus {
  pending
  running
  completed
  failed
  cancelled
}

enum MonitoringDashboardType {
  system_overview
  performance_monitoring
  usage_analytics
  health_monitoring
  custom
}

enum WidgetType {
  metric_chart
  line_chart
  bar_chart
  pie_chart
  gauge
  table
  alert_list
  health_status
  custom
}

enum MetricType {
  counter
  gauge
  histogram
  summary
  custom
}

enum EventType {
  page_view
  user_action
  api_call
  error
  performance
  custom
}

enum HealthCheckType {
  api_endpoint
  database
  external_service
  system_resource
  custom
}

enum HealthStatus {
  healthy
  warning
  critical
  unknown
}

enum AlertType {
  threshold_breach
  error_rate
  performance_degradation
  system_down
  custom
}

enum AlertSeverity {
  info
  warning
  critical
  emergency
}

enum AlertStatus {
  active
  acknowledged
  resolved
  suppressed
}

enum RuleType {
  metric_threshold
  error_rate
  response_time
  availability
  custom
}

enum ComparisonOperator {
  greater_than
  less_than
  equal_to
  not_equal_to
  greater_than_or_equal
  less_than_or_equal
}

enum NotificationChannelType {
  email
  slack
  webhook
  sms
  push_notification
  custom
}

enum ReportType {
  performance_summary
  usage_analytics
  system_health
  error_analysis
  custom
}

enum ReportStatus {
  generating
  completed
  failed
}

enum SmartTeachingSessionStatus {
  active
  paused
  completed
  abandoned
}

enum SmartTeachingInteractionType {
  content_view
  content_interaction
  question_asked
  answer_provided
  hint_requested
  method_change
  difficulty_adjustment
  assessment_started
  assessment_completed
  feedback_provided
  adaptive_question_generated
  progress_update
}

enum AssessmentStatus {
  not_started
  in_progress
  completed
  abandoned
}

enum ContentType {
  text
  math
  diagram
  simulation
  video
  audio
  interactive
  three_d
  advanced_three_d
  d3_advanced
  assessment
  feedback
  full
}
