// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Auth roles ---
enum Role {
  student
  teacher
  guardian
  admin
  super_admin
}

// --- Organization tiers ---
enum OrganizationTier {
  free
  basic
  premium
  enterprise
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      Role     @default(student)
  organizationId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  
  // Organization relationship
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // NextAuth relations
  accounts  Account[]
  sessions  Session[]
  
  // Guardian-Student relationships
  guardianRelationships GuardianRelationship[] @relation("GuardianUser")
  studentRelationships  GuardianRelationship[] @relation("StudentUser")
  
  // Email preferences
  emailPreferences EmailPreference?
  
  // Progress tracking for emails
  progressReports ProgressReport[]
  
  // Email logs
  emailLogs EmailLog[]
  
  // Audit logs
  auditLogs AuditLog[]
  
  // Scheduled reports created by user
  scheduledReports ScheduledReport[]
  
  // Attendance & Grades relationships
  studentAttendance Attendance[] @relation("StudentAttendance")
  teacherAttendance Attendance[] @relation("TeacherAttendance")
  teacherAssignments Assignment[] @relation("TeacherAssignment")
  studentGrades Grade[] @relation("StudentGrade")
  teacherGrades Grade[] @relation("TeacherGrade")
  studentPerformance StudentPerformance[]
  
  // Chat relationships
  sentMessages ChatMessage[]
  chatParticipants ChatParticipant[]

  // Curriculum relationships
  studentEnrollments StudentEnrollment[]
  studentProgress StudentProgress[]
  studentProfile StudentProfile?
  studentAdaptations LessonAdaptation[]
  assessmentAttempts AssessmentAttempt[]
  failureAnalyses FailureAnalysis[]
  learningAnalytics LearningAnalytics[]
  personalizationData PersonalizationData?
  successMetrics SuccessMetrics[]
  
  // Revolutionary Adaptive Teaching Engine relationships
  neuralPathways NeuralPathway[]
  
  // Phase 17: Advanced Assessment Engine relationships
  adaptiveAssessments AdaptiveAssessment[]
  assessmentPredictions AssessmentPrediction[]
  learningGaps LearningGap[]
  learningDimensions LearningDimensions?
  learningInterventions LearningIntervention[]
  crossDomainConnections CrossDomainConnection[]
  emotionalStates EmotionalState[]
  predictiveAnalytics PredictiveAnalytics[]
  
  // Phase 18: Advanced Analytics & Reporting relationships
  learningPatterns LearningPattern[]
  learningCurves LearningCurve[]
  knowledgeRetention KnowledgeRetention[]
  engagementOptimizations EngagementOptimization[]
  guardianInsights GuardianInsight[] @relation("GuardianInsight")
  studentInsights GuardianInsight[] @relation("StudentInsight")
  performanceKPIs PerformanceKPI[]
  analyticsDashboards AnalyticsDashboard[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// --- Organization Management ---
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  tier        OrganizationTier @default(free)
  domain      String?  @unique // Optional custom domain
  logoUrl     String?
  primaryColor String? @default("#2563eb")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  users       User[]
  documents   RagDocument[]
  settings    OrganizationSettings?
  auditLogs   AuditLog[]
  scheduledReports ScheduledReport[]
  
  // Usage tracking
  monthlyQuestions  Int @default(0)
  monthlyDocuments  Int @default(0)
  storageUsed      BigInt @default(0) // in bytes
  
  // Attendance & Grades relationships
  attendance Attendance[]
  gradeCategories GradeCategory[]
  assignments Assignment[]
  grades Grade[]
  studentPerformance StudentPerformance[]
  
  // Chat relationships
  chatRooms ChatRoom[]

  // Curriculum relationships
  subjects Subject[]
}

model OrganizationSettings {
  id             String @id @default(cuid())
  organizationId String @unique
  
  // Feature flags
  ragEnabled           Boolean @default(true)
  guardianEmailsEnabled Boolean @default(true)
  evaluationsEnabled   Boolean @default(false)
  
  // Limits based on tier
  maxUsers            Int @default(50)
  maxDocuments        Int @default(10)
  maxQuestionsPerMonth Int @default(1000)
  maxStorageBytes     BigInt @default(1073741824) // 1GB default
  
  // Customization
  welcomeMessage      String?
  customCss          String?
  emailFromName      String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

// --- RAG Models ---
model RagDocument {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  length    Int
  organizationId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  chunks    RagChunk[]
}

model RagChunk {
  id        String   @id @default(cuid())
  docId     String
  content   String   @db.Text
  embedding Unsupported("vector(1536)")
  document  RagDocument @relation(fields: [docId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

// --- Guardian-Student Relationships ---
model GuardianRelationship {
  id          String   @id @default(cuid())
  guardianId  String
  studentId   String
  status      GuardianRelationshipStatus @default(pending)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  guardian    User     @relation("GuardianUser", fields: [guardianId], references: [id], onDelete: Cascade)
  student     User     @relation("StudentUser", fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([guardianId, studentId])
}

enum GuardianRelationshipStatus {
  pending
  approved
  rejected
  revoked
}

// --- Email Preferences ---
model EmailPreference {
  id                    String   @id @default(cuid())
  userId                String   @unique
  weeklyProgressEnabled Boolean  @default(true)
  emailFrequency        EmailFrequency @default(weekly)
  lastEmailSent         DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum EmailFrequency {
  daily
  weekly
  monthly
  never
}

// --- Progress Reports ---
model ProgressReport {
  id          String   @id @default(cuid())
  userId      String
  reportDate  DateTime @default(now())
  sessionsCount Int    @default(0)
  questionsAsked Int   @default(0)
  topicsCovered String[] // Array of topics covered
  timeSpent   Int      @default(0) // in minutes
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// --- Email Templates ---
model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  htmlContent String   @db.Text
  textContent String   @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Email logs using this template
  emailLogs EmailLog[]
}

// --- Email Logs ---
model EmailLog {
  id          String   @id @default(cuid())
  recipientId String
  templateId  String?
  subject     String
  content     String   @db.Text
  status      EmailStatus @default(sent)
  sentAt      DateTime @default(now())
  errorMessage String?
  
  recipient   User     @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  template    EmailTemplate? @relation(fields: [templateId], references: [id])
}

enum EmailStatus {
  sent
  delivered
  failed
  bounced
}

// --- Audit Logging ---
model AuditLog {
  id             String   @id @default(cuid())
  organizationId String?
  userId         String?
  action         String   // e.g., "user_created", "document_uploaded", "email_sent"
  resource       String?  // e.g., "user", "document", "email"
  resourceId     String?  // ID of the affected resource
  details        Json?    // Additional details about the action
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())
  
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// --- Scheduled Reports ---
model ScheduledReport {
  id          String   @id @default(cuid())
  organizationId String
  name        String
  description String?
  frequency   ReportFrequency
  dayOfWeek   Int?     // 0-6 for weekly reports (Sunday = 0)
  dayOfMonth  Int?     // 1-31 for monthly reports
  time        String   // HH:MM format
  isActive    Boolean  @default(true)
  recipients  String[] // Array of email addresses
  metrics     String[] // Array of metric names to include
  format      ReportFormat
  lastSent    DateTime?
  nextScheduled DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdByUser User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

enum ReportFrequency {
  daily
  weekly
  monthly
}

enum ReportFormat {
  pdf
  csv
  html
}

// --- Attendance & Grades System ---

// Attendance tracking
model Attendance {
  id             String   @id @default(cuid())
  organizationId String
  studentId      String
  date           DateTime @db.Date
  status         AttendanceStatus @default(present)
  checkInTime    DateTime?
  checkOutTime   DateTime?
  notes          String?
  recordedBy     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  student        User         @relation("StudentAttendance", fields: [studentId], references: [id], onDelete: Cascade)
  recordedByUser User         @relation("TeacherAttendance", fields: [recordedBy], references: [id], onDelete: Cascade)
  
  @@unique([studentId, date])
  @@index([organizationId, date])
  @@index([studentId, date])
}

enum AttendanceStatus {
  present
  absent
  late
  excused
  sick
}

// Grade categories (e.g., Homework, Tests, Projects)
model GradeCategory {
  id             String   @id @default(cuid())
  organizationId String
  name           String   // e.g., "Homework", "Tests", "Projects"
  description    String?
  weight         Float    @default(1.0) // Weight in final grade calculation
  color          String?  @default("#3b82f6") // Color for UI display
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignments    Assignment[]
  
  @@unique([organizationId, name])
}

// Assignments (e.g., Math Quiz, Science Project)
model Assignment {
  id             String   @id @default(cuid())
  organizationId String
  categoryId     String
  title          String
  description    String?  @db.Text
  dueDate        DateTime?
  totalPoints    Float    @default(100.0)
  isActive       Boolean  @default(true)
  createdBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  category       GradeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdByUser  User         @relation("TeacherAssignment", fields: [createdBy], references: [id], onDelete: Cascade)
  grades         Grade[]
  
  @@index([organizationId, dueDate])
}

// Individual student grades
model Grade {
  id           String   @id @default(cuid())
  organizationId String
  studentId    String
  assignmentId String
  score        Float
  maxScore     Float
  percentage   Float    // Calculated percentage (score/maxScore * 100)
  letterGrade  String?  // e.g., "A", "B+", "C-"
  feedback     String?  @db.Text
  gradedBy     String
  gradedAt     DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  student      User         @relation("StudentGrade", fields: [studentId], references: [id], onDelete: Cascade)
  assignment   Assignment   @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  gradedByUser User         @relation("TeacherGrade", fields: [gradedBy], references: [id], onDelete: Cascade)
  
  @@unique([studentId, assignmentId])
  @@index([organizationId, studentId])
  @@index([assignmentId])
}

// Student performance summaries
model StudentPerformance {
  id             String   @id @default(cuid())
  organizationId String
  studentId      String
  period         PerformancePeriod
  startDate      DateTime @db.Date
  endDate        DateTime @db.Date
  
  // Attendance metrics
  totalDays      Int      @default(0)
  presentDays    Int      @default(0)
  absentDays     Int      @default(0)
  lateDays       Int      @default(0)
  attendanceRate Float    @default(0.0) // Percentage
  
  // Grade metrics
  totalAssignments Int    @default(0)
  completedAssignments Int @default(0)
  averageGrade    Float   @default(0.0)
  highestGrade    Float   @default(0.0)
  lowestGrade     Float   @default(0.0)
  
  // Calculated fields
  gpa            Float    @default(0.0) // Grade Point Average
  rank           Int?     // Class rank (if applicable)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  student        User         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, studentId, period, startDate])
  @@index([organizationId, period, startDate])
}

enum PerformancePeriod {
  daily
  weekly
  monthly
  semester
  yearly
}

// --- Chat System Models ---

// Chat rooms for each organization
model ChatRoom {
  id             String   @id @default(cuid())
  organizationId String
  name           String   @default("General")
  description    String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  messages       ChatMessage[]
  participants   ChatParticipant[]
  
  @@unique([organizationId, name])
  @@index([organizationId, isActive])
}

// Chat messages
model ChatMessage {
  id         String   @id @default(cuid())
  roomId     String
  senderId   String
  content    String   @db.Text
  messageType MessageType @default(text)
  isEdited   Boolean  @default(false)
  editedAt   DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  room       ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender     User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  @@index([roomId, createdAt])
  @@index([senderId, createdAt])
}

// Chat participants (users in each room)
model ChatParticipant {
  id         String   @id @default(cuid())
  roomId     String
  userId     String
  joinedAt   DateTime @default(now())
  lastReadAt DateTime?
  isActive   Boolean  @default(true)
  
  room       ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([roomId, userId])
  @@index([userId, isActive])
}

enum MessageType {
  text
  system
  notification
}

// --- AI Teacher Curriculum Engine Models ---

enum SubjectLevel {
  elementary
  middle
  high
  college
  university
}

enum DifficultyLevel {
  beginner
  intermediate
  advanced
  expert
}

enum AssessmentType {
  quiz
  test
  assignment
  project
  homework
}

enum QuestionType {
  multiple_choice
  short_answer
  essay
  coding
  true_false
  fill_in_blank
}

enum FailureType {
  concept_gap
  prerequisite_missing
  learning_style_mismatch
  attention_deficit
  motivation_issue
}

enum PaceLevel {
  slow
  moderate
  fast
  adaptive
}

// Subject (e.g., Mathematics, Physics, History)
model Subject {
  id          String   @id @default(cuid())
  name        String   // "Mathematics", "Physics", "History"
  description String?
  level       SubjectLevel
  isActive    Boolean  @default(true)
  organizationId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  topics      Topic[]
  enrollments StudentEnrollment[]
  successMetrics SuccessMetrics[]
  
  // Phase 17: Advanced Assessment Engine relationships
  adaptiveAssessments AdaptiveAssessment[]
  assessmentPredictions AssessmentPrediction[]
  learningGaps LearningGap[]
  
  // Phase 18: Advanced Analytics & Reporting relationships
  learningCurves LearningCurve[]
  knowledgeRetention KnowledgeRetention[]
  performanceKPIs PerformanceKPI[]
  
  @@unique([organizationId, name])
  @@index([organizationId, isActive])
}

// Topic within a subject (e.g., Algebra, Geometry, Calculus)
model Topic {
  id          String   @id @default(cuid())
  subjectId   String
  name        String   // "Algebra", "Geometry", "Calculus"
  description String?
  order       Int      // Sequence within subject
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  
  // Phase 17: Advanced Assessment Engine relationships
  learningGaps LearningGap[]
  
  @@unique([subjectId, name])
  @@index([subjectId, order])
}

// Individual lesson within a topic
model Lesson {
  id            String   @id @default(cuid())
  topicId       String
  title         String
  content       String   @db.Text
  objectives    String[] // Learning objectives
  difficulty    DifficultyLevel
  estimatedTime Int      // Minutes
  order         Int      // Sequence within topic
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  topic         Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  prerequisites LessonPrerequisite[]
  prerequisiteFor LessonPrerequisite[] @relation("Prerequisite")
  assessments   Assessment[]
  progress      StudentProgress[]
  adaptations   LessonAdaptation[]
  
  @@unique([topicId, title])
  @@index([topicId, order])
}

// Prerequisites between lessons
model LessonPrerequisite {
  id            String   @id @default(cuid())
  lessonId      String
  prerequisiteId String
  createdAt     DateTime @default(now())
  
  lesson        Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  prerequisite  Lesson   @relation("Prerequisite", fields: [prerequisiteId], references: [id], onDelete: Cascade)
  
  @@unique([lessonId, prerequisiteId])
}

// Student enrollment in subjects
model StudentEnrollment {
  id          String   @id @default(cuid())
  studentId   String
  subjectId   String
  startedAt   DateTime @default(now())
  completedAt DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, subjectId])
  @@index([studentId, isActive])
}

// Student progress tracking for lessons
model StudentProgress {
  id          String   @id @default(cuid())
  studentId   String
  lessonId    String
  status      ProgressStatus @default(not_started)
  startedAt   DateTime?
  completedAt DateTime?
  timeSpent   Int      @default(0) // Minutes
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  
  @@unique([studentId, lessonId])
  @@index([studentId, status])
}

enum ProgressStatus {
  not_started
  in_progress
  completed
  failed
  retry_needed
}

// Student learning profile for personalization
model StudentProfile {
  id              String      @id @default(cuid())
  studentId       String      @unique
  learningStyle   Json        // LearningStyle object
  preferredPace   PaceLevel   @default(moderate)
  strengthAreas   String[]    // Topics student excels in
  weaknessAreas   String[]    // Topics needing improvement
  motivationLevel Float       @default(0.5)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  student         User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([studentId])
}

// Lesson adaptations for individual students
model LessonAdaptation {
  id                String        @id @default(cuid())
  studentId         String
  lessonId          String
  originalContent   String        @db.Text
  adaptedContent    String        @db.Text
  adaptationReason  String
  effectiveness     Float?        // Measured after assessment
  createdAt         DateTime      @default(now())
  
  student           User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lesson            Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@index([studentId, lessonId])
}

// Assessment system
model Assessment {
  id          String   @id @default(cuid())
  lessonId    String
  type        AssessmentType
  title       String
  instructions String  @db.Text
  timeLimit   Int?     // Minutes
  passingScore Float   @default(0.7)
  maxAttempts Int      @default(3)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    AssessmentAttempt[]
  failureAnalysis FailureAnalysis[]
  
  @@index([lessonId, type])
}

// Questions within assessments
model Question {
  id            String      @id @default(cuid())
  assessmentId  String
  type          QuestionType
  content       String      @db.Text
  points        Float       @default(1.0)
  correctAnswer String?     @db.Text
  explanation   String?     @db.Text
  order         Int
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  assessment    Assessment  @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  options       QuestionOption[]
  responses     StudentResponse[]
  
  @@index([assessmentId, order])
}

// Multiple choice options
model QuestionOption {
  id          String   @id @default(cuid())
  questionId  String
  content     String   @db.Text
  isCorrect   Boolean  @default(false)
  order       Int
  createdAt   DateTime @default(now())
  
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@index([questionId, order])
}

// Student assessment attempts
model AssessmentAttempt {
  id           String    @id @default(cuid())
  studentId    String
  assessmentId String
  startedAt    DateTime  @default(now())
  completedAt  DateTime?
  score        Float?
  feedback     String?   @db.Text
  passed       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  student      User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  responses    StudentResponse[]
  
  @@index([studentId, assessmentId])
  @@index([studentId, passed])
}

// Individual student responses to questions
model StudentResponse {
  id              String   @id @default(cuid())
  attemptId       String
  questionId      String
  answer          String   @db.Text
  isCorrect       Boolean?
  pointsEarned    Float    @default(0.0)
  feedback        String?  @db.Text
  timeSpent       Int      @default(0) // Seconds
  createdAt       DateTime @default(now())
  
  attempt         AssessmentAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  
  @@unique([attemptId, questionId])
}

// --- Phase 17: Advanced Assessment Engine ---

// Adaptive Assessment Sessions
model AdaptiveAssessment {
  id              String   @id @default(cuid())
  studentId       String
  subjectId       String
  sessionType     AdaptiveSessionType
  currentLevel    Int      @default(1)
  totalQuestions  Int      @default(0)
  correctAnswers  Int      @default(0)
  currentDifficulty Float  @default(0.5) // 0.0 to 1.0
  confidence      Float    @default(0.5) // AI confidence in assessment
  isActive        Boolean  @default(true)
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  student         User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject         Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  questions       AdaptiveQuestion[]
  responses       AdaptiveResponse[]
  analytics       AdaptiveAnalytics[]
  
  @@index([studentId, isActive])
  @@index([subjectId, sessionType])
}

enum AdaptiveSessionType {
  DIAGNOSTIC      // Initial assessment to determine starting level
  FORMATIVE       // Ongoing assessment during learning
  SUMMATIVE       // Final assessment of learning outcomes
  REMEDIATION     // Assessment focused on weak areas
  ENRICHMENT      // Assessment for advanced learners
}

// Adaptive Questions with AI-generated content
model AdaptiveQuestion {
  id                String   @id @default(cuid())
  adaptiveAssessmentId String
  questionType      AdaptiveQuestionType
  content           Json     // Flexible content structure
  difficulty        Float    // 0.0 to 1.0
  estimatedTime     Int      // Seconds
  learningObjective String?
  cognitiveLevel    CognitiveLevel
  isAnswered        Boolean  @default(false)
  order             Int
  createdAt         DateTime @default(now())
  
  adaptiveAssessment AdaptiveAssessment @relation(fields: [adaptiveAssessmentId], references: [id], onDelete: Cascade)
  responses          AdaptiveResponse[]
  
  @@index([adaptiveAssessmentId, order])
}

enum AdaptiveQuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  SHORT_ANSWER
  ESSAY
  MATHEMATICAL
  CODE_EXECUTION
  SIMULATION
  AUDIO_RESPONSE
  VISUAL_ANALYSIS
  INTERACTIVE_DEMO
}

enum CognitiveLevel {
  REMEMBER
  UNDERSTAND
  APPLY
  ANALYZE
  EVALUATE
  CREATE
}

// Student responses to adaptive questions
model AdaptiveResponse {
  id                String   @id @default(cuid())
  adaptiveAssessmentId String
  questionId        String
  answer            Json     // Flexible answer structure
  isCorrect         Boolean?
  confidence        Float?   // Student's confidence in answer
  timeSpent         Int      // Seconds
  hintsUsed         Int      @default(0)
  attempts          Int      @default(1)
  aiFeedback        String?  @db.Text
  createdAt         DateTime @default(now())
  
  adaptiveAssessment AdaptiveAssessment @relation(fields: [adaptiveAssessmentId], references: [id], onDelete: Cascade)
  question           AdaptiveQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@unique([adaptiveAssessmentId, questionId])
}

// Advanced Assessment Analytics
model AdaptiveAnalytics {
  id                String   @id @default(cuid())
  adaptiveAssessmentId String
  metricType        AnalyticsMetricType
  value             Float
  metadata          Json?    // Additional context data
  timestamp         DateTime @default(now())
  
  adaptiveAssessment AdaptiveAssessment @relation(fields: [adaptiveAssessmentId], references: [id], onDelete: Cascade)
  
  @@index([adaptiveAssessmentId, metricType])
}

enum AnalyticsMetricType {
  LEARNING_VELOCITY
  RETENTION_RATE
  ENGAGEMENT_SCORE
  CONFIDENCE_LEVEL
  DIFFICULTY_ADJUSTMENT
  MASTERY_PROGRESSION
  TIME_EFFICIENCY
  ERROR_PATTERN_ANALYSIS
}

// Assessment Performance Predictions
model AssessmentPrediction {
  id                String   @id @default(cuid())
  studentId         String
  subjectId         String
  predictionType    PredictionType
  predictedScore    Float
  confidence        Float
  factors           Json     // Factors influencing prediction
  actualScore       Float?   // For validation
  accuracy          Float?   // Prediction accuracy
  createdAt         DateTime @default(now())
  validatedAt       DateTime?
  
  student           User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject           Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@index([studentId, predictionType])
  @@index([subjectId, createdAt])
}

enum PredictionType {
  ASSESSMENT_SCORE
  LEARNING_OUTCOME
  ENGAGEMENT_LEVEL
  COMPLETION_PROBABILITY
  DIFFICULTY_LEVEL
  TIME_TO_MASTERY
}

// Learning Gap Analysis
model LearningGap {
  id                String   @id @default(cuid())
  studentId         String
  subjectId         String
  topicId           String?
  gapType           GapType
  severity          GapSeverity
  description       String   @db.Text
  recommendedActions Json    // AI-generated recommendations
  isResolved        Boolean  @default(false)
  resolvedAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  student           User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject           Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  topic             Topic?   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  @@index([studentId, isResolved])
  @@index([subjectId, gapType])
}

enum GapType {
  CONCEPTUAL_UNDERSTANDING
  PROCEDURAL_KNOWLEDGE
  PROBLEM_SOLVING
  CRITICAL_THINKING
  APPLICATION_SKILLS
  RETENTION_ISSUES
  ENGAGEMENT_DROP
  TIME_MANAGEMENT
}

enum GapSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Failure analysis for adaptive teaching
model FailureAnalysis {
  id              String    @id @default(cuid())
  studentId       String
  assessmentId    String
  failureType     FailureType
  diagnosis       String    @db.Text
  remediation     String    @db.Text
  resolved        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  student         User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assessment      Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  @@index([studentId, resolved])
}

// Learning analytics for personalization
model LearningAnalytics {
  id                String    @id @default(cuid())
  studentId         String
  dateRange         DateTime  @db.Date
  conceptsMastered  Int       @default(0)
  timeSpent         Int       // Minutes
  assessmentScores  Float[]
  strugglingTopics  String[]
  improvingTopics   String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, dateRange])
  @@index([studentId, dateRange])
}

// Personalization data for adaptive teaching
model PersonalizationData {
  id                    String    @id @default(cuid())
  studentId             String    @unique
  effectiveStrategies   Json      // TeachingStrategy[]
  ineffectiveStrategies Json      // TeachingStrategy[]
  optimalDifficulty     Json      // Per-topic difficulty preferences
  contentPreferences    Json      // Preferred content types
  studyPatterns         Json      // Optimal times, duration, etc.
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  student               User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

// Success metrics tracking
model SuccessMetrics {
  id              String    @id @default(cuid())
  studentId       String
  subjectId       String
  period          PerformancePeriod
  startDate       DateTime  @db.Date
  endDate         DateTime  @db.Date
  
  // Completion metrics
  totalLessons    Int       @default(0)
  completedLessons Int      @default(0)
  completionRate  Float     @default(0.0) // % of lessons completed
  
  // Mastery metrics
  totalAssessments Int      @default(0)
  passedAssessments Int     @default(0)
  masteryRate     Float     @default(0.0) // % of assessments passed
  
  // Engagement metrics
  timeSpent       Int       @default(0) // Minutes
  engagementScore Float     @default(0.0) // Participation and interaction metrics
  
  // Retention metrics
  retentionRate   Float     @default(0.0) // % of concepts retained over time
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  student         User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject         Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  
  @@unique([studentId, subjectId, period, startDate])
  @@index([studentId, period, startDate])
}

// --- Revolutionary Adaptive Teaching Engine Models ---

// Neural pathway types for cognitive processing patterns
enum PathwayType {
  sequential
  parallel
  hierarchical
  network
  hybrid
}

// Learning intervention types
enum InterventionType {
  predictive
  remedial
  accelerative
  creative
  emotional
}

// Neural pathways representing how each student's brain processes information
model NeuralPathway {
  id                String      @id @default(cuid())
  studentId         String
  pathwayType       PathwayType
  strength          Float       @default(0.5) // 0-1, how well this pathway works
  activationPattern Json        // Neural activation sequence
  learningVelocity  Float       @default(0.5) // Speed of learning through this pathway
  retentionRate     Float       @default(0.5) // How well they retain information
  emotionalResonance Float      @default(0.5) // Emotional engagement level
  crossDomainTransfer Float     @default(0.5) // Ability to transfer across domains
  lastUpdated       DateTime    @default(now()) @updatedAt
  
  student           User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  interventions     LearningIntervention[]
  
  @@unique([studentId, pathwayType])
  @@index([studentId, strength])
}

// Learning dimensions analysis
model LearningDimensions {
  id                String      @id @default(cuid())
  studentId         String      @unique
  cognitive         Json        // { processingSpeed, workingMemory, attentionSpan, patternRecognition }
  emotional         Json        // { motivation, confidence, frustration, curiosity }
  social            Json        // { collaboration, competition, mentorship, independence }
  creative          Json        // { imagination, innovation, artistic, analytical }
  lastAnalyzed      DateTime    @default(now()) @updatedAt
  
  student           User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([studentId])
}

// Revolutionary learning interventions
model LearningIntervention {
  id                      String          @id @default(cuid())
  studentId               String
  pathwayId               String?
  interventionType        InterventionType
  trigger                 String          // What caused this intervention
  approach                String          // The teaching approach to use
  expectedOutcome         String
  confidence              Float           @default(0.5) // AI confidence (0-1)
  personalizedContent     String          @db.Text // AI-generated personalized content
  crossDomainConnections  String[]        // Connections to other subjects
  emotionalSupport        String          @db.Text // Emotional guidance
  successMetrics          String[]        // How to measure success
  isActive                Boolean         @default(true)
  appliedAt               DateTime?
  completedAt             DateTime?
  effectiveness           Float?          // Measured effectiveness after completion
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @default(now()) @updatedAt
  
  student                 User            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  pathway                 NeuralPathway?  @relation(fields: [pathwayId], references: [id])
  feedback                InterventionFeedback[]
  
  @@index([studentId, interventionType])
  @@index([studentId, isActive])
}

// Feedback on intervention effectiveness
model InterventionFeedback {
  id                String    @id @default(cuid())
  interventionId    String
  feedbackType      String    // 'success', 'failure', 'partial', 'emotional'
  rating            Float     // 0-1 effectiveness rating
  comments          String?   @db.Text
  metrics           Json      // Specific metrics data
  createdAt         DateTime  @default(now())
  
  intervention      LearningIntervention @relation(fields: [interventionId], references: [id], onDelete: Cascade)
  
  @@index([interventionId, feedbackType])
}

// Cross-domain learning connections
model CrossDomainConnection {
  id                String    @id @default(cuid())
  studentId         String
  sourceDomain      String    // Original subject/topic
  targetDomain      String    // Connected subject/topic
  connectionType    String    // 'analogy', 'metaphor', 'application', 'creative'
  strength          Float     @default(0.5) // How strong this connection is
  usageCount        Int       @default(0) // How often this connection is used
  effectiveness     Float     @default(0.5) // How effective this connection is
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, sourceDomain, targetDomain, connectionType])
  @@index([studentId, strength])
}

// Emotional state tracking
model EmotionalState {
  id                String    @id @default(cuid())
  studentId         String
  sessionId         String?   // Link to specific learning session
  confidence        Float     @default(0.5) // 0-1 confidence level
  stress            Float     @default(0.3) // 0-1 stress level
  engagement        Float     @default(0.7) // 0-1 engagement level
  motivation        Float     @default(0.6) // 0-1 motivation level
  curiosity         Float     @default(0.5) // 0-1 curiosity level
  frustration       Float     @default(0.2) // 0-1 frustration level
  joy               Float     @default(0.4) // 0-1 joy level
  context           String?   // What was happening when this state was recorded
  detectedAt        DateTime  @default(now())
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([studentId, detectedAt])
  @@index([studentId, stress])
}

// Predictive learning analytics
model PredictiveAnalytics {
  id                String    @id @default(cuid())
  studentId         String
  predictionType    String    // 'success', 'struggle', 'engagement', 'retention'
  confidence        Float     @default(0.5) // AI confidence in prediction
  predictedValue    Float     // Predicted metric value
  actualValue       Float?    // Actual value when measured
  accuracy          Float?    // How accurate the prediction was
  factors           Json      // Factors that influenced the prediction
  interventionSuggested Boolean @default(false) // Whether intervention was suggested
  predictedAt       DateTime  @default(now())
  measuredAt        DateTime?
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([studentId, predictionType])
  @@index([studentId, predictedAt])
}

// --- Phase 18: Advanced Analytics & Reporting Models ---

// Learning pattern analysis for deep insights
model LearningPattern {
  id                    String    @id @default(cuid())
  studentId             String
  patternType           LearningPatternType
  conceptualStrengths   String[]  // Areas of conceptual understanding
  proceduralStrengths   String[]  // Areas of procedural knowledge
  commonMistakes        String[]  // Frequently made errors
  effectiveStrategies   Json      // TeachingStrategy[] that work well
  optimalStudyTimes     String[]  // Best times for learning
  preferredContentTypes Json      // ContentType[] preferences
  learningVelocity      Float     @default(0.5) // Speed of learning
  retentionRate         Float     @default(0.5) // Knowledge retention
  engagementPattern     Json      // Engagement patterns over time
  difficultyPreference  Float     @default(0.5) // Preferred difficulty level
  socialLearningStyle   Json      // Collaborative vs individual preferences
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt
  
  student               User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, patternType])
  @@index([studentId, patternType])
}

enum LearningPatternType {
  COGNITIVE_PROCESSING
  LEARNING_STYLE
  ENGAGEMENT_PATTERN
  RETENTION_PATTERN
  DIFFICULTY_PREFERENCE
  SOCIAL_LEARNING
  TEMPORAL_PATTERN
  CONTENT_PREFERENCE
}

// Comprehensive learning curve analysis
model LearningCurve {
  id                String    @id @default(cuid())
  studentId         String
  subjectId         String
  topicId           String?
  curveType         CurveType
  dataPoints        Json      // Array of {time, mastery, difficulty} points
  slope             Float     // Learning velocity
  plateauPoints     Json      // Points where learning plateaus
  accelerationZones Json      // Areas of rapid learning
  difficultySpikes  Json      // Points of increased difficulty
  masteryThreshold  Float     @default(0.8) // Threshold for mastery
  predictedCompletion DateTime? // Predicted completion time
  confidence        Float     @default(0.5) // AI confidence in curve
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject           Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@index([studentId, subjectId])
  @@index([studentId, curveType])
}

enum CurveType {
  MASTERY_CURVE
  ENGAGEMENT_CURVE
  DIFFICULTY_CURVE
  RETENTION_CURVE
  VELOCITY_CURVE
  COMPREHENSION_CURVE
}

// Knowledge retention tracking with spaced repetition
model KnowledgeRetention {
  id                String    @id @default(cuid())
  studentId         String
  conceptId         String    // Unique identifier for the concept
  conceptName       String
  subjectId         String
  initialMastery    Float     // Initial mastery level (0-1)
  retentionLevel    Float     // Current retention level (0-1)
  lastReviewed      DateTime
  nextReview        DateTime  // Spaced repetition schedule
  reviewCount       Int       @default(0)
  forgettingCurve   Json      // Retention decay over time
  reinforcementNeeded Boolean @default(false)
  masteryThreshold  Float     @default(0.8)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject           Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, conceptId])
  @@index([studentId, nextReview])
  @@index([studentId, reinforcementNeeded])
}

// Engagement optimization tracking
model EngagementOptimization {
  id                String    @id @default(cuid())
  studentId         String
  sessionId         String?   // Link to specific learning session
  engagementLevel   Float     // Current engagement (0-1)
  engagementFactors Json      // Factors affecting engagement
  optimizationActions Json    // Actions taken to improve engagement
  effectiveness     Float?    // How effective the optimization was
  contentAdjustments Json     // Content modifications made
  pacingAdjustments Json      // Pacing changes made
  interactionChanges Json     // Interaction pattern changes
  beforeEngagement  Float     // Engagement level before optimization
  afterEngagement   Float?    // Engagement level after optimization
  timestamp         DateTime  @default(now())
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([studentId, timestamp])
  @@index([studentId, engagementLevel])
}

// Parent/Guardian insights and recommendations
model GuardianInsight {
  id                String    @id @default(cuid())
  guardianId        String
  studentId         String
  insightType       InsightType
  title             String
  description       String    @db.Text
  recommendations   Json      // Array of actionable recommendations
  priority          InsightPriority
  isRead            Boolean   @default(false)
  actionTaken       Boolean   @default(false)
  actionNotes       String?   @db.Text
  effectiveness     Float?    // How effective the insight was
  generatedAt       DateTime  @default(now())
  expiresAt         DateTime? // When this insight becomes outdated
  
  guardian          User      @relation("GuardianInsight", fields: [guardianId], references: [id], onDelete: Cascade)
  student           User      @relation("StudentInsight", fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([guardianId, isRead])
  @@index([studentId, insightType])
  @@index([generatedAt, priority])
}

enum InsightType {
  ACADEMIC_PROGRESS
  LEARNING_STYLE
  ENGAGEMENT_LEVEL
  STRUGGLING_AREAS
  STRENGTH_AREAS
  STUDY_HABITS
  MOTIVATION_LEVEL
  SOCIAL_LEARNING
  ATTENTION_SPAN
  DIFFICULTY_PREFERENCE
  RECOMMENDED_INTERVENTIONS
  CELEBRATION_MOMENTS
}

enum InsightPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Comprehensive performance metrics and KPIs
model PerformanceKPI {
  id                String    @id @default(cuid())
  studentId         String
  subjectId         String?
  kpiType           KPIType
  period            PerformancePeriod
  startDate         DateTime  @db.Date
  endDate           DateTime  @db.Date
  
  // Academic KPIs
  masteryRate       Float     @default(0.0) // % of concepts mastered
  completionRate    Float     @default(0.0) // % of lessons completed
  assessmentScore   Float     @default(0.0) // Average assessment score
  learningVelocity  Float     @default(0.0) // Rate of learning progress
  
  // Engagement KPIs
  engagementScore   Float     @default(0.0) // Overall engagement level
  timeOnTask        Int       @default(0) // Minutes spent on learning
  interactionRate   Float     @default(0.0) // Rate of interactions
  persistenceScore  Float     @default(0.0) // Persistence in difficult tasks
  
  // Retention KPIs
  retentionRate     Float     @default(0.0) // Knowledge retention over time
  transferRate      Float     @default(0.0) // Ability to transfer knowledge
  applicationRate   Float     @default(0.0) // Ability to apply knowledge
  
  // Behavioral KPIs
  attendanceRate    Float     @default(0.0) // Attendance consistency
  punctualityRate   Float     @default(0.0) // Punctuality in submissions
  collaborationScore Float    @default(0.0) // Collaborative learning score
  
  // Growth KPIs
  improvementRate   Float     @default(0.0) // Rate of improvement over time
  goalAchievement   Float     @default(0.0) // % of goals achieved
  selfEfficacy      Float     @default(0.0) // Self-confidence in learning
  
  // Comparative metrics
  peerComparison    Json      // Comparison with peer group
  historicalTrend   Json      // Historical performance trend
  benchmarkScore    Float?    // Score against benchmarks
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  
  student           User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject           Subject?  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, subjectId, kpiType, period, startDate])
  @@index([studentId, kpiType, period])
  @@index([studentId, startDate, endDate])
}

enum KPIType {
  ACADEMIC_PERFORMANCE
  ENGAGEMENT_METRICS
  RETENTION_ANALYSIS
  BEHAVIORAL_INSIGHTS
  GROWTH_TRACKING
  COMPARATIVE_ANALYSIS
  GOAL_ACHIEVEMENT
  SKILL_DEVELOPMENT
}

// Learning analytics dashboard configuration
model AnalyticsDashboard {
  id                String    @id @default(cuid())
  userId            String
  dashboardType     DashboardType
  name              String
  description       String?
  configuration     Json      // Dashboard layout and widget configuration
  isDefault         Boolean   @default(false)
  isPublic          Boolean   @default(false)
  refreshInterval   Int       @default(300) // Seconds
  lastRefreshed     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, dashboardType])
  @@index([userId, isDefault])
}

enum DashboardType {
  STUDENT_PROGRESS
  TEACHER_ANALYTICS
  ADMIN_OVERVIEW
  GUARDIAN_INSIGHTS
  CUSTOM_ANALYTICS
  PERFORMANCE_TRACKING
  ENGAGEMENT_MONITORING
  RETENTION_ANALYSIS
}
