name: nightly-ragas
on:
  schedule:
    - cron: "0 2 * * *"  # nightly 02:00 UTC
  workflow_dispatch: {}  # Allow manual trigger

jobs:
  eval:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ragas datasets pandas openai tiktoken requests
          
      - name: Run RAGAS evaluation
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          APP_URL: ${{ secrets.APP_URL }}
          MODEL_NAME: gpt-4o-mini
        run: |
          python tools/evals/ragas_eval.py
          
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ragas-results
          path: tools/evals/out/*
          
      - name: Create evaluation badge
        if: always()
        run: |
          if [ -f "tools/evals/out/summary.txt" ]; then
            if grep -q "All metrics passed thresholds" "tools/evals/out/summary.txt"; then
              echo "✅ RAGAS evaluation passed"
              echo "status=passing" >> $GITHUB_OUTPUT
            else
              echo "❌ RAGAS evaluation failed"
              echo "status=failing" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ No summary file found"
            echo "status=unknown" >> $GITHUB_OUTPUT
          fi
          
      - name: Comment on PR (if triggered by PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary = 'No summary available';
            try {
              summary = fs.readFileSync('tools/evals/out/summary.txt', 'utf8');
            } catch (e) {
              console.log('Could not read summary file');
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## RAGAS Evaluation Results\n\n\`\`\`\n${summary}\n\`\`\`\n\n[View full results](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });
